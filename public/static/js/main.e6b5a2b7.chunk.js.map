{"version":3,"sources":["utils/actions/Types.js","utils/helpers/Define.js","utils/reducer/AuthReducer.js","utils/helpers/Response.js","utils/reducer/AppReducer.js","utils/reducer/CostReducer.js","utils/reducer/SeasonReducer.js","utils/context/AppContext.js","utils/actions/AuthAction.js","utils/actions/AppAction.js","components/layouts/alert/Alert.jsx","components/layouts/alert/Loading.jsx","components/pages/auth/Login.jsx","components/layouts/basic/Sidebar.jsx","components/layouts/basic/Footer.jsx","components/layouts/basic/Header.jsx","components/layouts/basic/ContentWrapper.jsx","components/layouts/modal/Modal.jsx","utils/helpers/Utils.js","utils/actions/SeasonAction.js","components/layouts/modal/LogoutModal.jsx","components/layouts/basic/Page.jsx","components/layouts/modal/AddSeasonModal.jsx","components/layouts/modal/SwitchSeasonModal.jsx","components/pages/dashboard/SeasonPart.jsx","components/pages/dashboard/CostSummery.jsx","components/pages/dashboard/Dashboard.jsx","components/pages/404/NotFound.jsx","utils/actions/CostAction.js","components/layouts/modal/AddCoalCostModal.jsx","components/layouts/tables/Pagination.jsx","components/layouts/tables/CoalTable.jsx","components/pages/cost/Coal.jsx","components/layouts/tables/SoilTable.jsx","components/layouts/modal/AddSoilCostModal.jsx","components/pages/cost/Soil.jsx","components/layouts/tables/TaxTable.jsx","components/layouts/modal/AddTaxCostModal.jsx","components/pages/cost/Tax.jsx","components/layouts/tables/OtherCostTable.jsx","components/layouts/modal/AddOtherCostModal.jsx","components/pages/cost/OtherCost.jsx","components/layouts/tables/LandLordListTable.jsx","components/layouts/modal/LandLordListModal.jsx","components/pages/cost/LandLordList.jsx","components/layouts/tables/Filter.jsx","components/layouts/tables/LandLordCostTable.jsx","components/layouts/modal/LandLordCostModal.jsx","components/pages/cost/LandLordCost.jsx","components/layouts/tables/StaffListTable.jsx","components/layouts/modal/AddNewStaffModal.jsx","components/pages/cost/StaffList.jsx","components/layouts/tables/StaffSalaryTable.jsx","components/layouts/modal/AddStaffSalaryModal.jsx","components/pages/cost/StaffSalary.jsx","components/layouts/tables/DailyLabourCostInfoTable.jsx","components/layouts/modal/AddDailyLabourCostModal.jsx","components/pages/cost/LabourDailyCost.jsx","components/layouts/tables/ShorderTable.jsx","components/layouts/modal/AddNewShorderModal.jsx","components/pages/brickbuilt/ShorderList.jsx","components/layouts/modal/AddBrickBuiltCostModal.jsx","components/layouts/tables/BrickBuiltCostTable.jsx","components/pages/brickbuilt/MilList.jsx","components/pages/setupdb/DbSetup.jsx","components/layouts/router/Router.jsx","App.js","index.js"],"names":["Types","LOGIN","LOGOUT","START_LOADING","STOP_LOADING","SET_RESPONSE","REMOVE_RESPONSE","RELOAD","ADD_DATA","UPDATE_DATA","GET_ALL_DATA","ADD_SEASON","CLEAR_SEASON","SWITCH_SEASON","Define","USERINFO_LOCAL","SEASONINFO_LOCAL","DATE_FORMAT","DATE_FORMAT_SIMPLE","NO_TYPE","MIL_TYPE","KACHA_TYPE","PAKA_TYPE","JAB_TYPE","user_init_state","localStorage","getItem","JSON","parse","AuthReducer","state","action","type","payload","Response","success","title","desc","app_init_state","loading","response","reload","AppReducer","app_state","costInitState","CostReducer","map","itm","id","season_init_state","SeasonReducer","arr","active","StateContext","createContext","DispatchContext","AppContext","props","useReducer","app","appDispatch","user","userDispatch","coal","coalDispatch","soil","soilDispatch","tax","taxDispatch","otherCost","otherCostDispatch","landlordlist","landlordlistDispatch","landlordcost","landlordcostDispatch","stafflist","stafflistDispatch","staffsalary","staffsalaryDispatch","labourdailycost","labourdailycostDispatch","sharderList","sharderListDispatch","brickbuiltcost","brickbuiltcostDispatch","global_state","seasons","global_dispatch","seasonsDispatch","Provider","value","children","AuthAction","Dispatch","getInstance","Login","tmpUser","a","Promise","resolve","reject","axios","post","then","res","status","data","message","setItem","stringify","catch","e","Logout","removeItem","AppAction","Alert","useContext","tp","dtn","className","role","onClick","Loading","colorClass","color","useState","email","setEmail","password","setPassword","history","useHistory","logged_in","to","push","onSubmit","preventDefault","em","toLocaleLowerCase","trim","pass","validation_res","validation","method","name","onChange","target","placeholder","Sidebar","href","exact","activeClassName","document","getElementById","classList","toggle","Footer","Header","data-toggle","aria-haspopup","aria-expanded","user_name","user_role","style","fontSize","aria-labelledby","pathname","user_phone_num","user_email","data-target","ContentWrapper","Modal","resetInput","setInput","initState","tabIndex","aria-hidden","data-dismiss","aria-label","callback","btnTitle","Utils","getCurrentSeason","SeasonAction","dispatch","source","getSource","CancelToken","getAllSeason","table","get","cancelToken","token","isCancel","addSeason","url","newdata","headers","access_token","season_obj","new_object","console","error","startSeason","SwitchSeason","new_id","seaon_old_ID","put","Clear","LogoutModal","Page","useEffect","moment","token_expirein","isBefore","log","undefined","AddSeasonModal","input","isValidField","old_id","window","location","SwitchSeasonModal","seasonobj","find","item","parseInt","key","SeasonPart","start","Date","format","end","active_season","length","click","cancel","data-backdrop","CostSummery","setCoal","setSoil","labour","setLabour","season_id","fetch","json","total_things","total_amount","total_paid","toString","width","src","alt","Dashboard","NotFound","CostAction","getAll","getAllData","getPaginateData","page_no","getAllDataInRange","getAllJoinData","main_table","main_id","join_table","join_id","getByJoinData","s_id","getBrickBuiltCost","addData","created_by_uid","updated_by_uid","updateData","AddCoalCostModal","paid_amount","total_coal_weight","coal_dealer_name","transaction_date","Pagination","setPage","endArray","setEnd","prev","next","CoalTable","page","nodeName","_id","filter","Coal","SoilTable","soil_car_quantity","soil_per_car_price","contractor_name","AddSoilCostModal","Soil","TaxTable","tax_title","AddTaxCostModal","Tax","OtherCostTable","other_cost_title","other_cost_details","AddOtherCostModal","rows","OtherCost","LandLordListTable","land_lord_name","land_quantity","land_rent_per_year","LandLordListModal","LandLordList","Filter","aria-controls","setDate","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","date","direction","LandLordCostTable","firstDayOfYear","startOf","startDate","endDate","LandLordCostModal","disabled","alredyAdded","time","isSame","land_lord_id","newinput","parseFloat","LandLordCost","StaffListTable","staff_name","staff_salary","staff_position","staff_join_date","AddNewStaffModal","StaffList","StaffSalaryTable","firstDayOfMonth","AddStaffSalaryModal","staff_id","StaffSalary","DailyLabourCostInfoTable","labour_name","labour_daily_salary","AddDailyLabourCostModal","LabourDailyCost","ShorderTable","shorder_name","shorder_type","early_paid_amount","cleared_early_amount","AddNewShorderModal","types","ShorderList","AddBrickBuiltCostModal","newSharderList","setNewSharderList","cost_type","shorder_id","weekly_bill","weekly_brick_quantity","weekly_cash_bill_paid","weekly_early_bill_paid","BrickBuiltCostTable","MilList","DbSetup","user_password","user_salary","setUser","createuser","startConfig1","season","other_cost","land_load_list","land_load_cost","staff_list","labour_salary","shorder_info","brick_built_cost","all","ck","Object","entries","htmlFor","Router","path","component","default","Component","defaults","baseURL","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e6b5a2b7.chunk.js","sourcesContent":["const Types = {\r\n    LOGIN: \"LOGIN\",\r\n    LOGOUT: \"LOGOUT\",\r\n    START_LOADING: \"START_LOADING\",\r\n    STOP_LOADING: \"STOP_LOADING\",\r\n    SET_RESPONSE: \"SET_RESPONSE\",\r\n    REMOVE_RESPONSE: \"REMOVE_RESPONSE\",\r\n    RELOAD: \"RELOAD\",\r\n    // crud types\r\n    ADD_DATA: \"ADD_DATA\",\r\n    UPDATE_DATA: \"UPDATE_DATA\",\r\n    GET_ALL_DATA: \"GET_ALL_DATA\",\r\n    //season\r\n    ADD_SEASON: \"ADD_SEASON\",\r\n    CLEAR_SEASON: \"CLEAR_SEASON\",\r\n    SWITCH_SEASON: \"SWITCH_SEASON\",\r\n}\r\nexport default Types;","const Define = {\r\n    USERINFO_LOCAL: \"USERINFO_LOCAL\",\r\n    SEASONINFO_LOCAL: \"SEASONINFO_LOCAL\",\r\n    DATE_FORMAT: \"YYYY-MMMM-DD\",\r\n    DATE_FORMAT_SIMPLE: \"YYYY-MM-DD\",\r\n    NO_TYPE: \"NO_TYPE\",\r\n    MIL_TYPE: \"MIL_TYPE\",\r\n    KACHA_TYPE: \"KACHA_TYPE\",\r\n    PAKA_TYPE: \"PAKA_TYPE\",\r\n    JAB_TYPE: \"JAB_TYPE\",\r\n}\r\nexport default Define;","import Types from '../actions/Types';\r\nimport Define from '../helpers/Define';\r\n\r\nexport const user_init_state = localStorage.getItem(Define.USERINFO_LOCAL) === null ?\r\n    {} :\r\n    JSON.parse(localStorage.getItem(Define.USERINFO_LOCAL));\r\n\r\nconst AuthReducer = (state, action) => {\r\n    if (action.type === Types.LOGIN) {\r\n        return {\r\n            ...state,//empty initally\r\n            ...action.payload\r\n        };\r\n        //return action.payload;//return the user object(which store in local storage)\r\n    } else if (action.type === Types.LOGOUT) {\r\n        return {};\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\nexport default AuthReducer;","const Response = (success, title, desc, type) => {\r\n    return { success: success, title: title, desc: desc, type: type }\r\n}//Response(false/true, \"message title\" , \"message description\", \"danger-bootstrap color\")\r\nexport default Response;","import Types from './../actions/Types';\r\nimport Response from './../helpers/Response';\r\n\r\nexport const app_init_state = {\r\n    loading: false,\r\n    response: Response(null, null, null, null),\r\n    reload: false\r\n}\r\n\r\nconst AppReducer = (app_state, action) => {\r\n    switch (action.type) {\r\n        case Types.START_LOADING:\r\n            return {\r\n                ...app_state,\r\n                loading: true\r\n            }\r\n        case Types.STOP_LOADING:\r\n            return {\r\n                ...app_state,\r\n                loading: false\r\n            }\r\n        case Types.SET_RESPONSE:\r\n            return {\r\n                ...app_state,\r\n                response: action.payload//full response object\r\n            }\r\n        case Types.REMOVE_RESPONSE:\r\n            return {\r\n                ...app_state,\r\n                response: Response(null, null, null, null)//full response object\r\n            }\r\n        case Types.RELOAD:\r\n            return {\r\n                ...app_state,\r\n                reload: !app_state.reload//just change it will auto call useEffect\r\n            }\r\n        default:\r\n            return app_state;\r\n    }\r\n}\r\n\r\nexport default AppReducer;\r\n","import Types from '../actions/Types';\r\n\r\nexport const costInitState = [];\r\n\r\nconst CostReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case Types.GET_ALL_DATA:\r\n            return [...action.payload];//return an array\r\n        case Types.ADD_DATA:\r\n            return [action.payload, ...state];//return array\r\n        case Types.UPDATE_DATA:\r\n            //let objIndex = state.findIndex((obj => obj.id == action.payload.id));\r\n            //state[objIndex] = action.payload;\r\n            state = state.map(itm => {\r\n                if (itm.id === action.payload.id)\r\n                    return action.payload;\r\n                else\r\n                    return itm;\r\n            });\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default CostReducer;\r\n\r\n","import Types from './../actions/Types';\r\n\r\nexport const season_init_state = []\r\n/**\r\n * \r\n * @param {[season{\r\n *      id,title,start,end,active=1,0\r\n * }]} state \r\n */\r\nconst SeasonReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case Types.GET_ALL_DATA:\r\n            return [...action.payload];//return an array\r\n        case Types.ADD_SEASON:\r\n            return [...state, action.payload];//return [], payload {}\r\n        case Types.CLEAR_SEASON:\r\n            return [];//after logout\r\n        case Types.SWITCH_SEASON:\r\n            const arr = state.map(itm => {\r\n                if (itm.active === 1) {\r\n                    //update the active to zero\r\n                    itm.active = 0;\r\n                    return itm;\r\n                } else if (itm.id === action.payload) {\r\n                    //update the new itm to active to one\r\n                    itm.active = 1;\r\n                    return itm;\r\n                } else {\r\n                    return itm;\r\n                }\r\n            })\r\n            return [...arr];//\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default SeasonReducer;","import React, { createContext, useReducer } from 'react';\r\nimport AuthReducer, { user_init_state } from '../reducer/AuthReducer';\r\nimport AppReducer, { app_init_state } from '../reducer/AppReducer'\r\nimport CostReducer, { costInitState } from 'utils/reducer/CostReducer';\r\nimport SeasonReducer, { season_init_state } from 'utils/reducer/SeasonReducer';\r\n\r\nexport const StateContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\n//constant of this page\r\n\r\nconst AppContext = (props) => {\r\n    const [app, appDispatch] = useReducer(AppReducer, app_init_state);//{}\r\n    const [user, userDispatch] = useReducer(AuthReducer, user_init_state);//{}\r\n    const [coal, coalDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [soil, soilDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [tax, taxDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [otherCost, otherCostDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [landlordlist, landlordlistDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [landlordcost, landlordcostDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [stafflist, stafflistDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [staffsalary, staffsalaryDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [labourdailycost, labourdailycostDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [sharderList, sharderListDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    const [brickbuiltcost, brickbuiltcostDispatch] = useReducer(CostReducer, costInitState);//[]\r\n    //season\r\n    const [seasons, seasonsDispatch] = useReducer(SeasonReducer, season_init_state);//[]\r\n\r\n    const global_state = {\r\n        app,\r\n        user,\r\n        coal, soil, tax, otherCost,\r\n        landlordlist, landlordcost,\r\n        stafflist, staffsalary,\r\n        labourdailycost,\r\n        sharderList,\r\n        brickbuiltcost,\r\n        seasons\r\n    };\r\n    const global_dispatch = {\r\n        appDispatch,\r\n        userDispatch,\r\n        coalDispatch, soilDispatch, taxDispatch, otherCostDispatch,\r\n        landlordlistDispatch, landlordcostDispatch,\r\n        stafflistDispatch, staffsalaryDispatch,\r\n        labourdailycostDispatch,\r\n        sharderListDispatch,\r\n        brickbuiltcostDispatch,\r\n        seasonsDispatch\r\n    };\r\n\r\n    return (\r\n        <StateContext.Provider value={global_state}>\r\n            <DispatchContext.Provider value={global_dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </StateContext.Provider>\r\n    );\r\n};\r\n\r\n\r\nexport default AppContext;","import axios from 'axios';\r\nimport Types from './Types';\r\nimport Define from 'utils/helpers/Define';\r\n/**\r\n * it is an object,not function\r\n */\r\n\r\nconst AuthAction = {\r\n    Dispatch: null,\r\n    getInstance: (userDispatch) => {\r\n        AuthAction.Dispatch = userDispatch;\r\n        return AuthAction;\r\n    },\r\n    Login: async (tmpUser) => {\r\n        return new Promise((resolve, reject) => {\r\n            //fetch user from server\r\n            axios.post(`user/post/login`, tmpUser).then(res => {\r\n                if (res.status === 200) {\r\n                    const user = res.data.response;\r\n                    const message = res.data.message;\r\n                    //user loggedin offline\r\n                    localStorage.setItem(Define.USERINFO_LOCAL, JSON.stringify(user));\r\n                    //change global state\r\n                    AuthAction.Dispatch({\r\n                        type: Types.LOGIN,\r\n                        payload: user\r\n                    });\r\n                    //resolve the  promise\r\n                    resolve({ message, user });\r\n                } else {\r\n                    reject({ message: res.data.message });\r\n                }\r\n            }).catch(e => {\r\n                reject(e);\r\n            });\r\n        });\r\n    },\r\n    Logout: () => {\r\n        //local storage change\r\n        localStorage.removeItem(Define.USERINFO_LOCAL);\r\n        //change global state\r\n        AuthAction.Dispatch({ type: Types.LOGOUT });\r\n    }\r\n}\r\n\r\n\r\nexport default AuthAction;\r\n","import Types from './Types';\r\nconst AppAction = {\r\n    Dispatch: null,\r\n    getInstance: (appDispatch) => {\r\n        AppAction.Dispatch = appDispatch;\r\n        return AppAction;\r\n    },\r\n    START_LOADING: () => {\r\n        AppAction.Dispatch({\r\n            type: Types.START_LOADING,\r\n        });\r\n    },\r\n    STOP_LOADING: () => {\r\n        AppAction.Dispatch({\r\n            type: Types.STOP_LOADING,\r\n        });\r\n    },\r\n    SET_RESPONSE: (response) => {\r\n        AppAction.Dispatch({\r\n            type: Types.SET_RESPONSE,\r\n            payload: response\r\n        });\r\n    },\r\n    REMOVE_RESPONSE: () => {\r\n        AppAction.Dispatch({\r\n            type: Types.REMOVE_RESPONSE,\r\n        });\r\n    },\r\n    RELOAD: () => {\r\n        AppAction.Dispatch({\r\n            type: Types.RELOAD,\r\n        });\r\n    },\r\n}\r\n\r\nexport default AppAction;","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { DispatchContext, StateContext } from './../../../utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\n\r\n\r\nconst Alert = () => {\r\n    const { app } = useContext(StateContext);\r\n    const { appDispatch } = useContext(DispatchContext);\r\n\r\n    const removeResponse = () => {\r\n        AppAction.getInstance(appDispatch).REMOVE_RESPONSE();\r\n    }\r\n\r\n    let tp = \"alert alert-\" + app.response.type;\r\n    let dtn = \"my-2 btn btn-outline-\" + app.response.type;\r\n    return (\r\n        <>\r\n            {\r\n                app.response.type ?\r\n                    <div className={tp} role=\"alert\">\r\n                        <h4 className=\"alert-heading\">{app.response.title}</h4>\r\n                        <p className=\"mb-0\">{app.response.desc}</p>\r\n                        {app.response.type && true ? <button className={dtn} onClick={removeResponse} >X</button> : \"\"}\r\n                    </div>\r\n                    : <></>\r\n            }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Alert;","import React, { useContext } from 'react';\r\nimport { StateContext } from 'utils/context/AppContext';\r\n\r\nconst Loading = (props) => {\r\n    const { app } = useContext(StateContext);\r\n    let colorClass = \"\";\r\n    if (props.color) {\r\n        colorClass = `spinner-border text-${props.color}`;\r\n    } else {\r\n        colorClass = `spinner-border text-light`;\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                app.loading ?\r\n                    // <div className=\"progress\">\r\n                    //     <div className=\"progress-bar progress-bar-info progress-bar-striped\" role=\"progressbar\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ width: \"100%\" }}>\r\n                    //     </div>\r\n                    // </div>\r\n\r\n                    <div className=\"text-center\">\r\n                        <h3 className=\"text-info\">Loading...Please Wait</h3>\r\n                        <div className={colorClass} role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n                    : ''\r\n            }\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default Loading;","import React, { useState, useContext } from 'react';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport AuthAction from 'utils/actions/AuthAction';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\n\r\n\r\nconst Login = () => {\r\n  //local state\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  let history = useHistory();\r\n\r\n  function goToDbSetup() {\r\n    history.push(\"/db-setup\");\r\n  }\r\n  //use context\r\n  const { user } = useContext(StateContext);\r\n  const { appDispatch, userDispatch } = useContext(DispatchContext);\r\n\r\n  //local method\r\n  const onChangeEmail = (e) => {\r\n    setEmail(e.target.value);\r\n  }\r\n  const onChangePassword = (e) => {\r\n    setPassword(e.target.value);\r\n  }\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    AppAction.getInstance(appDispatch).START_LOADING();\r\n    let em = email.toLocaleLowerCase().trim();\r\n    let pass = password.trim();\r\n    let validation_res = validation(em, pass);\r\n    if (validation_res.success) {//user info is valid , call login action\r\n      const tmpUser = {\r\n        email: em,\r\n        password: password\r\n      }\r\n      AuthAction.getInstance(userDispatch).Login(tmpUser)\r\n        .then((res) => {\r\n          AppAction.getInstance(appDispatch).STOP_LOADING();\r\n        })\r\n        .catch(e => {\r\n          AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n          AppAction.getInstance(appDispatch).STOP_LOADING();\r\n        });\r\n    } else {\r\n      AppAction.getInstance(appDispatch).SET_RESPONSE(validation_res);\r\n      AppAction.getInstance(appDispatch).STOP_LOADING();\r\n    }\r\n  }\r\n\r\n  //return \r\n  if (user !== null && user.logged_in === true) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"bg-gradient-primary vh-100\" >\r\n        <div className=\"container \">\r\n          {/* <!-- Outer Row --> */}\r\n          <div className=\"row\">\r\n            <div className=\"col-md-11\">\r\n              <h1 className=\"text-light text-center mt-5\">Welcome to Brick Factory System</h1>\r\n              <Alert />\r\n              <Loading color=\"light\" />\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <button className=\"btn btn-outline-light mt-5\" onClick={goToDbSetup}>Config</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n              <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n                <div className=\"card-body p-0\">\r\n                  {/* <!-- Nested Row within Card Body --> */}\r\n                  <div className=\"row\">\r\n                    <div className=\"col-lg-6 d-none d-lg-block bg-login-image\"></div>\r\n                    <div className=\"col-lg-6\">\r\n                      <div className=\"p-5\">\r\n                        <div className=\"text-center\">\r\n                          <h1 className=\"h4 text-gray-900 mb-4\">Welcome Back!</h1>\r\n                        </div>\r\n                        <form className=\"user\" onSubmit={onSubmit} method=\"POST\">\r\n                          <div className=\"form-group\">\r\n                            <input type=\"email\" className=\"form-control form-control-user\"\r\n                              name=\"email\" onChange={onChangeEmail} value={email}\r\n                              placeholder=\"Enter Email Address...\" />\r\n                          </div>\r\n                          <div className=\"form-group\">\r\n                            <input type=\"password\" className=\"form-control form-control-user\"\r\n                              name=\"password\" onChange={onChangePassword} value={password}\r\n                              placeholder=\"Password\" />\r\n                          </div>\r\n                          {/* <div className=\"form-group\">\r\n                            <div className=\"custom-control custom-checkbox small\">\r\n                              <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck\" />\r\n                              <label className=\"custom-control-label\" htmlFor=\"customCheck\">Remember\r\n                                                    Me</label>\r\n                            </div>\r\n                          </div> */}\r\n                          <input type=\"submit\" value=\"Login Now\" className=\"btn btn-primary btn-user btn-block\" />\r\n                          {/* <hr /> */}\r\n                          {/* <div className=\"text-center\">\r\n                                          <a className=\"small\" href=\"forgot-password.html\">Forgot Password?</a>\r\n                                       </div>\r\n                                       <div className=\"text-center\">\r\n                                          <a className=\"small\" href=\"register.html\">Create an Account!</a>\r\n                                       </div> */}\r\n                        </form>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* row end here */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <!-- end outer row --> */}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n//extra method\r\nconst validation = (email, password) => {\r\n  if (email !== null && email !== \"\" && password !== null && password !== \"\") {\r\n    return Response(true, \"all field are correctly filled\", \"all field are correctly filled,please wait for authentication.\", \"info\");\r\n  } else {\r\n    return Response(false, \"Enter All the Fields\", \"may be you missed some fileds to fill\", \"danger\");\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default function Sidebar() {\r\n   return (\r\n      <>\r\n         {/* <!-- Sidebar --> */}\r\n         <ul className=\"navbar-nav bg-primary sidebar sidebar-dark accordion\" id=\"accordionSidebar\">\r\n            {/* <!-- Sidebar - Brand --> */}\r\n            <a className=\"sidebar-brand d-flex align-items-center justify-content-center\" href=\"/\">\r\n               <div className=\"sidebar-brand-icon rotate-n-15\">\r\n                  <i className=\"fas fa-laugh-wink\"></i>\r\n               </div>\r\n               <div className=\"sidebar-brand-text mx-3\">m27<sup>lab.com</sup></div>\r\n            </a>\r\n            {/* <!-- Divider --> */}\r\n            <hr className=\"sidebar-divider my-0\" />\r\n\r\n\r\n            <li className=\"nav-item \">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link \" to=\"/\">\r\n                  <i className=\"fas fa-fw fa-tachometer-alt\"></i>\r\n                  <span>Dashboard</span>\r\n               </NavLink>\r\n            </li>\r\n            <hr className=\"sidebar-divider\" />\r\n\r\n            <div className=\"sidebar-heading\">\r\n               Brick Built Cost Info\r\n            </div>\r\n            <li className=\"nav-item \">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/shorder-list\">\r\n                  <i className=\"fas fa-fw fa-award\"></i>\r\n                  <span>Shorder List</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item \">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/mil-cost\">\r\n                  <i className=\"fas fa-fw fa-award\"></i>\r\n                  <span>Brick Built Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <hr className=\"sidebar-divider d-none d-md-block\" />\r\n\r\n\r\n            <div className=\"sidebar-heading\">\r\n               Cost Info\r\n            </div>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/labour-cost\">\r\n                  <i className=\"fab fa-fw fa-accusoft\"></i>\r\n                  <span>Labour Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/coal\">\r\n                  <i className=\"fas fa-fw fa-chart-area\"></i>\r\n                  <span>Coal Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/soil\">\r\n                  <i className=\"fas fa-fw fa-table\"></i>\r\n                  <span>Soil Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/tax\">\r\n                  <i className=\"fas fa-fw fa-hryvnia\"></i>\r\n                  <span>Tax Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/other-cost\">\r\n                  <i className=\"fas fa-fw fa-euro-sign\"></i>\r\n                  <span>Other Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <hr className=\"sidebar-divider d-none d-md-block\" />\r\n            <div className=\"sidebar-heading\">\r\n               Staff Info\r\n            </div>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/staff-list\">\r\n                  <i className=\"fas fa-fw fa-award\"></i>\r\n                  <span>Staff List</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/staff-salary\">\r\n                  <i className=\"fab fa-fw fa-accusoft\"></i>\r\n                  <span>Staff Salary</span>\r\n               </NavLink>\r\n            </li>\r\n            <hr className=\"sidebar-divider d-none d-md-block\" />\r\n            <div className=\"sidebar-heading\">\r\n               Land Loard Info\r\n            </div>\r\n            <li className=\"nav-item \">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/land-lord-list\">\r\n                  <i className=\"fas fa-fw fa-award\"></i>\r\n                  <span>Land Lord List</span>\r\n               </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n               <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/land-lord-cost\">\r\n                  <i className=\"fab fa-fw fa-accusoft\"></i>\r\n                  <span>Land Lord Cost</span>\r\n               </NavLink>\r\n            </li>\r\n            <hr className=\"sidebar-divider d-none d-md-block\" />\r\n\r\n            <hr className=\"sidebar-divider d-none d-md-block\" />\r\n\r\n            {/* <!-- Sidebar Toggler (Sidebar) --> */}\r\n            <div className=\"text-center d-none d-md-inline mt-2\">\r\n               <button className=\"rounded-circle border-0\" id=\"sidebarToggle\" onClick={() => {\r\n                  document.getElementById(\"accordionSidebar\").classList.toggle(\"toggled\");\r\n               }}></button>\r\n            </div>\r\n         </ul>\r\n         {/* <!-- End of Sidebar --> */}\r\n      </>\r\n   )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer className=\"sticky-footer bg-light\">\r\n            <div className=\"container my-auto\">\r\n                <div className=\"copyright text-center my-auto\">\r\n                    <span>Copyright &copy; m27lab.com 2020</span>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { StateContext } from './../../../utils/context/AppContext';\r\n\r\nexport default function Header() {\r\n    const { user } = useContext(StateContext);\r\n\r\n\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\r\n\r\n            {/* <!-- Sidebar Toggle (Topbar) --> */}\r\n            <button id=\"sidebarToggleTop\" className=\"btn btn-link d-md-none rounded-circle mr-3\"\r\n                onClick={() => {\r\n                    document.getElementById(\"page-top\").classList.toggle(\"sidebar-toggled\");\r\n                    document.getElementById(\"accordionSidebar\").classList.toggle(\"toggled\");\r\n                }}\r\n            >\r\n                <i className=\"fa fa-bars\"></i>\r\n            </button>\r\n\r\n            {/* <!-- Topbar Navbar --> */}\r\n            <ul className=\"navbar-nav ml-auto\">\r\n\r\n                {/* <!-- Nav Item - User Information --> */}\r\n                <li className=\"nav-item dropdown no-arrow\">\r\n                    {/* <a className=\"nav-link dropdown-toggle\" id=\"userDropdown\" role=\"button\"\r\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">{user.user_name}-{user.user_role}</span>\r\n                        <i className=\"fas fa-user-circle text-primary  \" style={{ fontSize: 23 }}></i>\r\n                    </a> */}\r\n\r\n                    <Link to=\"#\" className=\"nav-link dropdown-toggle\" id=\"userDropdown\" role=\"button\"\r\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">{user.user_name}-{user.user_role}</span>\r\n                        <i className=\"fas fa-user-circle text-primary  \" style={{ fontSize: 23 }}></i>\r\n                    </Link>\r\n\r\n                    {/* <!-- Dropdown - User Information --> */}\r\n                    <div className=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\"\r\n                        aria-labelledby=\"userDropdown\">\r\n                        <Link className=\"dropdown-item\"\r\n                            to={{ pathname: `tel:${user.user_phone_num}` }}\r\n                            target=\"_blank\"\r\n                        >\r\n                            <i className=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\r\n                                 Phone: {user.user_phone_num}\r\n                        </Link>\r\n                        <div className=\"dropdown-divider\"></div>\r\n                        <Link className=\"dropdown-item\" to={{ pathname: `mailto:admin@gmail.com` }}\r\n                            target=\"_top\">\r\n                            <i className=\"fas fa-list fa-sm fa-fw mr-2 text-gray-400\"></i>\r\n                           Email: {user.user_email}\r\n                        </Link>\r\n                        <div className=\"dropdown-divider\"></div>\r\n                        <Link className=\"dropdown-item\" data-toggle=\"modal\" data-target=\"#logoutModal\" to=\"/\">\r\n                            <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\r\n                                    Logout\r\n                        </Link>\r\n                    </div>\r\n                </li>\r\n\r\n            </ul>\r\n\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nexport default function ContentWrapper(props) {\r\n   return (\r\n      <div id=\"content-wrapper\" className=\"d-flex flex-column bg-white\">\r\n         <div id=\"content\">\r\n            {/*Topbar*/}\r\n            <Header />\r\n            {/* main content */}\r\n            <div className=\"container-fluid\">\r\n               {props.children}\r\n            </div>\r\n         </div>\r\n         {/*Footer*/}\r\n         <Footer />\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Modal(props) {\r\n\r\n    const resetInput = () => {\r\n        props.resetInput.setInput(props.resetInput.initState);\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal fade\" id={props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">{props.title}</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={resetInput}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {props.children}\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={resetInput} >Close</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={props.callback}>{props.btnTitle}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Define from './Define';\r\n\r\nconst Utils = {\r\n    getCurrentSeason: () => {\r\n        if (localStorage.getItem(Define.SEASONINFO_LOCAL) !== null) {\r\n            return JSON.parse(localStorage.getItem(Define.SEASONINFO_LOCAL));\r\n        } else {\r\n            return {}\r\n        }\r\n    },\r\n}\r\n\r\nexport default Utils;\r\n","import axios from 'axios';\r\nimport Types from './Types';\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\n/**\r\n * it is an object\r\n */\r\nconst SeasonAction = {\r\n    dispatch: null,\r\n    source: null,\r\n    getInstance: (dispatch) => {\r\n        SeasonAction.dispatch = dispatch;\r\n        return SeasonAction;\r\n    },\r\n    getSource: () => {\r\n        SeasonAction.source = axios.CancelToken.source();\r\n        return SeasonAction.source;\r\n    },\r\n    //getall season\r\n    getAllSeason: async (table) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(`v1/get/${table}/`\r\n                , {\r\n                    cancelToken: SeasonAction.source.token\r\n                }\r\n            ).then(res => {\r\n                const message = res.data.message;\r\n                //console.log(\"milon= \", res);\r\n                if (res.status === 200) {\r\n                    const data = res.data.response;\r\n                    //dispatch the global state\r\n                    SeasonAction.dispatch({\r\n                        type: Types.GET_ALL_DATA,\r\n                        payload: data//an array\r\n                    });\r\n                    resolve({ message, data });\r\n                } else {\r\n                    reject({ message });\r\n                }\r\n            })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //add season\r\n    addSeason: (url, newdata) => {\r\n        return new Promise((resolve, reject) => {\r\n            const user = JSON.parse(localStorage.getItem(Define.USERINFO_LOCAL));\r\n\r\n            axios.post(url, newdata, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${user.access_token}`\r\n                },\r\n            }).then((res) => {\r\n                if (res.status === 200) {\r\n                    const season_obj = res.data.response.new_object\r\n                    //save into offline\r\n                    localStorage.setItem(Define.SEASONINFO_LOCAL, JSON.stringify(season_obj));\r\n                    //dispatch the global state\r\n                    SeasonAction.dispatch({\r\n                        type: Types.ADD_SEASON,\r\n                        payload: season_obj//an object\r\n                    });\r\n                    resolve({ message: res.data.message });\r\n                } else {\r\n                    reject({ message: res.data.message });\r\n                }\r\n            }).catch((e) => {\r\n                console.error(\"erroe: \", e)\r\n                reject(e);\r\n            })\r\n        });\r\n    },//clear while logout\r\n    startSeason: (url, newdata) => {\r\n        return new Promise((resolve, reject) => {\r\n            const user = JSON.parse(localStorage.getItem(Define.USERINFO_LOCAL));\r\n\r\n            axios.post(url, newdata, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${user.access_token}`\r\n                },\r\n            }).then((res) => {\r\n                if (res.status === 200) {\r\n                    const season_obj = res.data.response.new_object\r\n                    //save into offline\r\n                    localStorage.setItem(Define.SEASONINFO_LOCAL, JSON.stringify(season_obj));\r\n                    //dispatch the global state\r\n                    SeasonAction.dispatch({\r\n                        type: Types.ADD_SEASON,\r\n                        payload: season_obj//an object\r\n                    });\r\n                    resolve({ message: res.data.message });\r\n                } else {\r\n                    reject({ message: res.data.message });\r\n                }\r\n            }).catch((e) => {\r\n                console.error(\"erroe: \", e)\r\n                reject(e);\r\n            })\r\n        });\r\n    },\r\n    SwitchSeason: (season_obj) => {\r\n        // http://localhost:2727/api/v1/switchseason/4/1\r\n        //v1/switchseason/${seaon_old_ID}/${new_id}\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const user = JSON.parse(localStorage.getItem(Define.USERINFO_LOCAL));\r\n            const new_id = season_obj.id\r\n            const seaon_old_ID = Utils.getCurrentSeason().id;\r\n\r\n            axios.put(`v1/switchseason/${seaon_old_ID}/${new_id}`, {}, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${user.access_token}`\r\n                },\r\n            }).then((res) => {\r\n                //console.log(\"my response \", res);\r\n                if (res.status === 200) {\r\n                    //update local storage\r\n                    season_obj.active = 1;\r\n                    localStorage.setItem(Define.SEASONINFO_LOCAL, JSON.stringify(season_obj));\r\n                    //update the ui\r\n                    SeasonAction.dispatch({\r\n                        type: Types.SWITCH_SEASON,\r\n                        payload: new_id\r\n                    });\r\n                    resolve({ message: res.data.message });\r\n                } else {\r\n                    reject({ message: res.data.message });\r\n                }\r\n            }).catch((e) => {\r\n                console.error(\"erroe: \", e)\r\n                reject(e);\r\n            })\r\n        });\r\n\r\n\r\n    },\r\n    Clear: () => {\r\n        //local storage change\r\n        localStorage.removeItem(Define.SEASONINFO_LOCAL);\r\n        //change global state\r\n        SeasonAction.dispatch({ type: Types.CLEAR_SEASON });\r\n    }\r\n}\r\n\r\nexport default SeasonAction;","import React, { useContext } from 'react'\r\nimport AuthAction from '../../../utils/actions/AuthAction';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport Modal from './Modal';\r\nimport SeasonAction from './../../../utils/actions/SeasonAction';\r\n\r\nexport default function LogoutModal() {\r\n   const { userDispatch, seasonsDispatch } = useContext(DispatchContext);\r\n   const logOut = (e) => {\r\n      e.preventDefault();\r\n\r\n      SeasonAction.getInstance(seasonsDispatch).Clear();\r\n      AuthAction.getInstance(userDispatch).Logout();\r\n   }\r\n   return (\r\n      <Modal id=\"logoutModal\"\r\n         title=\"Ready to Leave?\"\r\n         btnTitle=\"Logout\"\r\n         callback={logOut}\r\n      >\r\n         <div className=\"modal-body\">Select \"Logout\" below if you are ready to end your current session.</div>\r\n      </Modal>\r\n   )\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { DispatchContext, StateContext } from 'utils/context/AppContext'\r\nimport Sidebar from './Sidebar';\r\nimport ContentWrapper from './ContentWrapper';\r\nimport LogoutModal from '../modal/LogoutModal';\r\nimport AuthAction from 'utils/actions/AuthAction';\r\n\r\nexport default function Page(props) {\r\n    const { user } = useContext(StateContext);\r\n    const { userDispatch } = useContext(DispatchContext);\r\n\r\n    useEffect(() => {\r\n        //check the token expire time\r\n        const isExpired = moment(user.token_expirein).isBefore();//if true-> then logout\r\n        if (isExpired) {\r\n            console.log(\"Token is expired.login again.\");\r\n            AuthAction.getInstance(userDispatch).Logout();\r\n        }\r\n    });\r\n\r\n    // check already logged in or not\r\n    if (user === null || user.logged_in === undefined || user.logged_in === false) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n    //render.\r\n    return (\r\n        <div>\r\n            {/* <!-- content start --> */}\r\n\r\n            {/* <!-- Page Wrapper --> */}\r\n            <div id=\"wrapper\">\r\n                {/* <!-- Sidebar --> */}\r\n                <Sidebar />\r\n                {/* <!-- EndofSidebar --> */}\r\n                {/* <!-- Content Wrapper --> */}\r\n                <ContentWrapper >\r\n                    {props.children}\r\n                </ContentWrapper>\r\n                {/* <!-- End of Content Wrapper --> */}\r\n            </div>\r\n            {/* <!-- End of Page Wrapper --> */}\r\n            {/* <!-- Scroll to Top Button--> */}\r\n            <a className=\"scroll-to-top rounded\" href=\"#page-top\">\r\n                <i className=\"fas fa-angle-up\"></i>\r\n            </a>\r\n            {/* <!-- Logout Modal--> */}\r\n            <LogoutModal />\r\n            {/* <!-- content end --> */}\r\n        </div>\r\n    )\r\n}\r\n","import Modal from './Modal';\r\nimport React, { useContext } from 'react'\r\nimport AppAction from './../../../utils/actions/AppAction';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport SeasonAction from './../../../utils/actions/SeasonAction';\r\nimport Define from './../../../utils/helpers/Define';\r\n\r\n\r\nexport default function AddSeasonModal(props) {\r\n    //global state\r\n    const { appDispatch, seasonsDispatch } = useContext(DispatchContext);\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n\r\n            //check start a new season or brand new season \r\n            if (!JSON.parse(localStorage.getItem(Define.SEASONINFO_LOCAL))) {\r\n                //brand new season\r\n                AppAction.getInstance(appDispatch).START_LOADING();\r\n                //add new info\r\n                SeasonAction.getInstance(seasonsDispatch).addSeason(\"v1/post/seasons_table/\", input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Season info added Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                        window.location.reload();\r\n\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n            } else {\r\n                //1. make inactive \r\n                //2. add new active season...\r\n                const old_id = JSON.parse(localStorage.getItem(Define.SEASONINFO_LOCAL)).id\r\n                SeasonAction.getInstance(seasonsDispatch).addSeason(`v1/season/seasons_table/${old_id}`, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Season Started Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                        window.location.reload();\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const isValidField = () => {\r\n        if (input.title === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add New Season\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"title\"\r\n                                    placeholder=\"Season Title e.g. Season-1 (mar-2020 to dec-2020)\"\r\n                                    value={input.title}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { DispatchContext, StateContext } from './../../../utils/context/AppContext';\r\nimport Modal from './Modal';\r\nimport SeasonAction from './../../../utils/actions/SeasonAction';\r\nimport Utils from 'utils/helpers/Utils';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from 'utils/helpers/Response';\r\n\r\nexport default function SwitchSeasonModal() {\r\n    //global sate\r\n    const { seasons } = useContext(StateContext);\r\n    const { seasonsDispatch, appDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const initState = Utils.getCurrentSeason();\r\n    const [input, setInput] = useState(initState);//input=id (season id)\r\n    //local method\r\n    const switchSeason = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (input === undefined || input.id === undefined || input.id === \"\") {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Select Season\", `Select A Season First `, \"danger\"));\r\n        } else {\r\n            const seasonobj = seasons.find(item => item.id === parseInt(input.id));\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            SeasonAction.getInstance(seasonsDispatch)\r\n                .SwitchSeason(seasonobj)\r\n                .then(res => {\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Season Switched Successfully `, \"success\"));\r\n                    AppAction.getInstance(appDispatch).RELOAD();\r\n                    setInput(initState);\r\n                    window.location.reload();\r\n                }).catch(e => {\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                });\r\n        }\r\n    }\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    return (\r\n        <Modal id=\"switchSeason\"\r\n            title=\"Select A Season\"\r\n            btnTitle=\"Switch Now\"\r\n            callback={switchSeason}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"modal-body\">\r\n                <select className=\"form-control\" name=\"id\" value={input.id} onChange={onChange} >\r\n                    <option value=\"\">Select Season</option>\r\n                    {seasons.map(item => {\r\n                        return <option key={item.id} value={item.id}>{item.title}</option>\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport moment from 'moment'\r\nimport AddSeasonModal from 'components/layouts/modal/AddSeasonModal';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport { DispatchContext, StateContext } from './../../../utils/context/AppContext';\r\nimport SeasonAction from './../../../utils/actions/SeasonAction';\r\nimport SwitchSeasonModal from 'components/layouts/modal/SwitchSeasonModal';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\n\r\nexport default function SeasonPart() {\r\n    //global sate\r\n    const { seasons, user } = useContext(StateContext);\r\n    const { seasonsDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const initState = {\r\n        title: \"\",\r\n        active: 1,\r\n        start: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n        end: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE)\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    //local method\r\n    const openModal = () => {\r\n        document.getElementById(\"seasonBtn\").click();\r\n    }\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const source = SeasonAction.getSource();\r\n        //no season in local, check in the database now\r\n        SeasonAction.getInstance(seasonsDispatch).getAllSeason('seasons_table')\r\n            .then(res => {\r\n\r\n                //console.log(\"season list==\", res);\r\n                //check do we have any active list or not\r\n                const active_season = res.data.find(item => item.active === 1)\r\n                if (res.data.length === 0) {//no season found create new season\r\n                    openModal(\"addSeasonID\")\r\n                } else if (!active_season) {//no active found ,select a season now\r\n                    // console.log(\"select a season...this case will not be happend\");\r\n                } else {\r\n                    //save into local storage\r\n                    localStorage.setItem(Define.SEASONINFO_LOCAL, JSON.stringify(active_season));\r\n                }\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n        //clean up \r\n        return () => {\r\n            source.cancel();\r\n        }\r\n\r\n    }, [seasons.length])\r\n\r\n\r\n\r\n    if (user === null || user.logged_in === undefined || user.logged_in === false) {\r\n        return <></>\r\n    }\r\n    return (\r\n        <>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddSeasonModal id=\"addSeasonID\" value={{ input, setInput, initState }} />\r\n            <button id=\"seasonBtn\" type=\"button\" className=\"d-none\" data-toggle=\"modal\" data-target=\"#addSeasonID\" data-backdrop=\"static\">\r\n                Add and Start Season</button>\r\n            {/* stich season */}\r\n            <SwitchSeasonModal />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h4>Dashboard</h4>\r\n                    <p>Current Season: {Utils.getCurrentSeason().title}</p>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    <button type=\"button\" data-toggle=\"modal\" data-target=\"#switchSeason\" data-backdrop=\"static\" className=\"btn btn-outline-primary badge-pill px-4 mr-2\">\r\n                        Switch Season\r\n                    </button>\r\n                    {/* open modal form when click on it */}\r\n\r\n                    <button type=\"button\" data-toggle=\"modal\" data-target=\"#addSeasonID\" data-backdrop=\"static\" className=\"btn btn-primary badge-pill px-4\">\r\n                        Start New Season\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport Utils from 'utils/helpers/Utils';\r\nimport { StateContext } from './../../../utils/context/AppContext';\r\n\r\nconst CostSummery = () => {\r\n    //global sate\r\n    const { app } = useContext(StateContext);\r\n    //local state\r\n    const [coal, setCoal] = useState({});\r\n    const [soil, setSoil] = useState({});\r\n    const [labour, setLabour] = useState({});\r\n\r\n    const season_id = Utils.getCurrentSeason().id;\r\n\r\n    useEffect(() => {\r\n        fetch(`sum/coal_cost_table/total_coal_weight/total_amount/paid_amount/${season_id}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCoal(data.response)\r\n            });\r\n\r\n        fetch(`sum/soil_cost_table/total_amount/total_amount/paid_amount/${season_id}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setSoil(data.response)\r\n            });\r\n        fetch(`sum/labour_daily_salary_table/labour_daily_salary/paid_amount/${season_id}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setLabour(data.response)\r\n            });\r\n\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [app.reload]);\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card border border-light shadow-sm\">\r\n                        <div className=\"card-body \">\r\n                            <h5 className=\"card-title text-primary\">Labour Cost Summery</h5>\r\n                            <p className=\"card-text\">Total Labour: {labour.total_things} </p>\r\n                            <p className=\"card-text\">Total Salary: {labour.total_amount} </p>\r\n                            <p className=\"card-text\">Total Paid Salary: {labour.total_paid}</p>\r\n                            <p className=\"card-text\">Total Due Salary:  {(labour.total_amount - labour.total_paid).toString()}</p>\r\n                            <a href=\"/labour-cost\" className=\"btn btn-outline-primary\">View Details</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card border border-light  shadow-sm\">\r\n                        <div className=\"card-body \">\r\n                            <h5 className=\"card-title text-primary\">Coal Cost Summery</h5>\r\n                            <p className=\"card-text\">Total Coal Weight: {coal.total_things} </p>\r\n                            <p className=\"card-text\">Total Price: {coal.total_amount} </p>\r\n                            <p className=\"card-text\">Total Paid Price: {coal.total_paid}  </p>\r\n                            <p className=\"card-text\">Total Due Price: {(coal.total_amount - coal.total_paid).toString()}</p>\r\n                            <a href=\"/coal\" className=\"btn btn-outline-primary\">View Details</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card border border-light  shadow-sm\">\r\n                        <div className=\"card-body \">\r\n                            <h5 className=\"card-title text-primary\">Soil Cost Summery</h5>\r\n                            <p className=\"card-text\">Total Car :  {soil.total_things}</p>\r\n                            <p className=\"card-text\">Total Price: {soil.total_amount}</p>\r\n                            <p className=\"card-text\">Total Paid Price: {soil.total_paid} </p>\r\n                            <p className=\"card-text\">Total Due Price: {(soil.total_amount - soil.total_paid).toString()}</p>\r\n                            <a href=\"/soil\" className=\"btn btn-outline-primary\">View Details</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row m-0 mt-3\">\r\n                <div className=\"col-md-12 p-0\">\r\n                    <img className=\"rounded\" style={{ width: '100%' }} src=\"https://source.unsplash.com/user/erondu/800x300\" alt=\"Brick Factory\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default CostSummery;\r\n","import React from 'react';\r\nimport Page from 'components/layouts/basic/Page';\r\nimport SeasonPart from './SeasonPart';\r\nimport CostSummery from './CostSummery';\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n    return (\r\n        <Page>\r\n            <SeasonPart />\r\n            <CostSummery />\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    const history = useHistory();\r\n    const goToHome = (e) => {\r\n        e.preventDefault();\r\n        history.push(\"/\");\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 text-center py-5\">\r\n                    <h1>page not found</h1>\r\n                    <p>You are in a wrong place. go to home!</p>\r\n                    <button className=\"btn btn-danger\" onClick={goToHome}>Go To HOME</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import axios from 'axios';\r\nimport Types from './Types';\r\nimport Define from 'utils/helpers/Define';\r\n\r\n/**\r\n * it is an object\r\n */\r\nconst CostAction = {\r\n    dispatch: null,\r\n    source: null,\r\n    getInstance: (dispatch) => {\r\n        CostAction.dispatch = dispatch;\r\n        return CostAction;\r\n    },\r\n    getSource: () => {\r\n        CostAction.source = axios.CancelToken.source();\r\n        return CostAction.source;\r\n    },\r\n    //get all data without range without season\r\n    //v1/get/${table}/\r\n    getAll: async (table) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(`v1/get/${table}/`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            ).then(res => {\r\n                const message = res.data.message;\r\n                if (res.status === 200) {\r\n                    const data = res.data.response;\r\n                    //dispatch the global state\r\n                    CostAction.dispatch({\r\n                        type: Types.GET_ALL_DATA,\r\n                        payload: data//an array\r\n                    });\r\n                    resolve({ message, data });\r\n                } else {\r\n                    reject({ message });\r\n                }\r\n            })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //get all data without range\r\n    //v1/get/${table}/${season_id}\r\n    getAllData: async (table, season_id) => {\r\n        //console.log(\"my test season: \", season_id);\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(`v1/get/${table}/${season_id}`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            ).then(res => {\r\n                const message = res.data.message;\r\n                if (res.status === 200) {\r\n                    const data = res.data.response;\r\n                    //dispatch the global state\r\n                    CostAction.dispatch({\r\n                        type: Types.GET_ALL_DATA,\r\n                        payload: data//an array\r\n                    });\r\n                    resolve({ message, data });\r\n                } else {\r\n                    reject({ message });\r\n                }\r\n            })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //get paginate data \r\n    //v1/get/${table}/${season_id}/${page_no}\r\n    getPaginateData: async (table, season_id, page_no) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(`v1/get/${table}/${season_id}/${page_no}`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            ).then(res => {\r\n                const message = res.data.message;\r\n                if (res.status === 200) {\r\n                    const data = res.data.response;\r\n                    //dispatch the global state\r\n                    CostAction.dispatch({\r\n                        type: Types.GET_ALL_DATA,\r\n                        payload: data//an array\r\n                    });\r\n                    resolve({ message, data });\r\n                } else {\r\n                    reject({ message: message });\r\n                }\r\n            })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //get all data in range(filter using transaction date)\r\n    //`v1/get/${table}/transaction_date/${start}/${end}`\r\n    getAllDataInRange: async (table, start, end) => {\r\n        return new Promise((resolve, reject) => {\r\n            //axios.get('v1/get/coal_cost_table')\r\n            axios.get(`v1/get/${table}/transaction_date/${start}/${end}`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            )\r\n                .then(res => {\r\n                    const message = res.data.message;\r\n                    if (res.status === 200) {\r\n                        const data = res.data.response;\r\n                        //dispatch the global state\r\n                        CostAction.dispatch({\r\n                            type: Types.GET_ALL_DATA,\r\n                            payload: data//an array\r\n                        });\r\n                        resolve({ message, data });\r\n                    } else {\r\n                        reject({ message });\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //get all data with join (only two table)\r\n    getAllJoinData: async (main_table, main_id, join_table, join_id, start, end) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(`v1/getjoin/${main_table}/${main_id}/${join_table}/${join_id}/transaction_date/${start}/${end}`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            )\r\n                .then(res => {\r\n                    const message = res.data.message;\r\n                    if (res.status === 200) {\r\n                        const data = res.data.response;\r\n                        //dispatch the global state\r\n                        CostAction.dispatch({\r\n                            type: Types.GET_ALL_DATA,\r\n                            payload: data//an array\r\n                        });\r\n                        resolve({ message, data });\r\n                    } else {\r\n                        reject({ message });\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //filer by season\r\n    getByJoinData: async (main_table, main_id, join_table, join_id, s_id) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(`v1/getjoin/${main_table}/${main_id}/${join_table}/${join_id}/${s_id}`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            )\r\n                .then(res => {\r\n                    const message = res.data.message;\r\n                    if (res.status === 200) {\r\n                        const data = res.data.response;\r\n                        //dispatch the global state\r\n                        CostAction.dispatch({\r\n                            type: Types.GET_ALL_DATA,\r\n                            payload: data//an array\r\n                        });\r\n                        resolve({ message, data });\r\n                    } else {\r\n                        reject({ message });\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    getBrickBuiltCost: (type, s_id) => {\r\n        return new Promise((resolve, reject) => {\r\n            //axios.get('v1/get/coal_cost_table')\r\n            axios.get(`v1/brickbuiltcost/${type}/${s_id}`\r\n                , {\r\n                    cancelToken: CostAction.source.token\r\n                }\r\n            )\r\n                .then(res => {\r\n                    const message = res.data.message;\r\n                    if (res.status === 200) {\r\n                        const data = res.data.response;\r\n                        //dispatch the global state\r\n                        CostAction.dispatch({\r\n                            type: Types.GET_ALL_DATA,\r\n                            payload: data//an array\r\n                        });\r\n                        resolve({ message, data });\r\n                    } else {\r\n                        reject({ message });\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    if (axios.isCancel(e)) {\r\n                        reject({ message: \"canceled the request\" });\r\n                    } else {\r\n                        reject(e);\r\n                    }\r\n                });\r\n        });\r\n    },\r\n    //add data\r\n    addData: (url, newdata) => {\r\n        return new Promise((resolve, reject) => {\r\n            const user = JSON.parse(localStorage.getItem(Define.USERINFO_LOCAL));\r\n            newdata.created_by_uid = user.id;\r\n            newdata.updated_by_uid = user.id;\r\n\r\n            axios.post(url, newdata, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${user.access_token}`\r\n                },\r\n            }).then((res) => {\r\n                if (res.status === 200) {\r\n                    //dispatch the global state\r\n                    CostAction.dispatch({\r\n                        type: Types.ADD_DATA,\r\n                        payload: res.data.response.new_object//an array\r\n                    });\r\n                    resolve({ message: res.data.message });\r\n                } else {\r\n                    reject({ message: res.data.message });\r\n                }\r\n            }).catch((e) => {\r\n                console.error(\"erroe: \", e)\r\n                reject(e);\r\n            })\r\n        });\r\n    },\r\n    updateData: (url, updateData, payload) => {\r\n        return new Promise((resolve, reject) => {\r\n            const user = JSON.parse(localStorage.getItem(Define.USERINFO_LOCAL));\r\n            updateData.updated_by_uid = user.id;\r\n\r\n            axios.put(url, updateData, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${user.access_token}`\r\n                },\r\n            }).then((res) => {\r\n                console.log(\"my response \", res);\r\n                if (res.status === 200) {\r\n                    //dispatch the global state\r\n                    CostAction.dispatch({\r\n                        type: Types.UPDATE_DATA,\r\n                        payload: payload\r\n                    });\r\n                    resolve({ message: res.data.message });\r\n                } else {\r\n                    reject({ message: res.data.message });\r\n                }\r\n            }).catch((e) => {\r\n                console.error(\"erroe: \", e)\r\n                reject(e);\r\n            })\r\n        });\r\n    }\r\n\r\n}\r\nexport default CostAction;\r\n","import React, { useContext } from 'react'\r\nimport Modal from './Modal';\r\nimport moment from 'moment';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\n\r\n\r\nexport default function AddCoalCostModal(props) {\r\n    //global state\r\n    const { appDispatch, coalDispatch } = useContext(DispatchContext);\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            if (input.id === undefined) {\r\n                //add new info\r\n                CostAction.getInstance(coalDispatch).addData(\"v1/post/coal_cost_table/\", input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n            } else {\r\n                //update existing info\r\n                CostAction.getInstance(coalDispatch).updateData(`v1/put/coal_cost_table/${input.id}`, input, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info updated Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const isValidField = () => {\r\n        if (input.total_amount === \"\" || input.paid_amount === \"\" || input.total_coal_weight === \"\" || input.coal_dealer_name === \"\" || input.transaction_date === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //render return method\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add Coal Cost\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"total_amount\"\r\n                                    placeholder=\"Total Amount\"\r\n                                    value={input.total_amount}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"paid_amount\"\r\n                                    value={input.paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Paid Amount\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"total_coal_weight\"\r\n                                    value={input.total_coal_weight}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Total Coal Weight\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"transaction_date\"\r\n                                    value={moment(input.transaction_date).format(Define.DATE_FORMAT_SIMPLE)}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"(e.g. 2020-02-26)\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"coal_dealer_name\"\r\n                                    value={input.coal_dealer_name}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Coal Dealer Name\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nconst Pagination = ({ setPage, endArray }) => {\r\n\r\n    const [end, setEnd] = endArray\r\n\r\n    const inc = () => {\r\n        if (!end) {\r\n            setPage(next => next + 1);\r\n        }\r\n\r\n    }\r\n    const dec = () => {\r\n        setPage(prev => prev === 1 ? 1 : (prev - 1));\r\n        setEnd(false)\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <button className=\"btn btn-outline-primary\" type=\"button\" onClick={() => { dec() }}>Go Previous Page</button>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    <button className=\"btn btn-outline-primary\" type=\"button\" onClick={() => { inc() }}>Go Next Page</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport moment from 'moment';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\nimport Pagination from './Pagination';\r\n\r\n\r\n\r\nexport default function CoalTable(props) {\r\n    //global state\r\n    const { app, coal } = useContext(StateContext);\r\n    const { coalDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const [page, setPage] = useState(1);\r\n    const endArray = useState(false);\r\n    const [end, setEnd] = endArray;\r\n\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        //now we will fetch all data\r\n        const table = \"coal_cost_table\";\r\n        const season_id = Utils.getCurrentSeason().id;\r\n        const source = CostAction.getSource();\r\n        if (!end) {\r\n            CostAction.getInstance(coalDispatch).getPaginateData(table, season_id, page)\r\n                .then(res => {\r\n                    //console.log(`${table}list `, res.message, res.data);\r\n                    setEnd(false)\r\n                })\r\n                .catch(e => {\r\n                    console.log(`${table} error `, e.message);\r\n                    setEnd(true)\r\n                    setPage(prev => prev - 1)\r\n                });\r\n        }\r\n        //cleanup\r\n        return () => {\r\n            console.log(`${table} clean up `);\r\n            source.cancel();\r\n        } // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [page, app.reload]);//reload because -> total amount change after edit .so need to reload.\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = coal.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n                <Pagination endArray={endArray} setPage={setPage} />\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Total Coal Weight</th>\r\n                                <th>Total Amount</th>\r\n                                <th>Paid Amount</th>\r\n                                <th>Due Amount</th>\r\n                                <th>Delear Name</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n                                coal.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.total_coal_weight}</td>\r\n                                        <td>{item.total_amount}</td>\r\n                                        <td>{item.paid_amount}</td>\r\n                                        <td>{item.total_amount - item.paid_amount}</td>\r\n                                        <td>{item.coal_dealer_name}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addCoalCostID\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport Page from 'components/layouts/basic/Page';\r\nimport AddCoalCostModal from 'components/layouts/modal/AddCoalCostModal';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport CoalTable from 'components/layouts/tables/CoalTable';\r\nimport moment from 'moment';\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function Coal() {\r\n\r\n    //local state\r\n    const initState = {\r\n        season_id: Utils.getCurrentSeason().id,\r\n        total_amount: \"\",\r\n        paid_amount: \"\",\r\n        total_coal_weight: \"\",\r\n        coal_dealer_name: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE)\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddCoalCostModal id=\"addCoalCostID\"\r\n                value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Coal Payment Info</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addCoalCostID\">\r\n                        Add Coal Payment Info</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <CoalTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react'\r\nimport moment from 'moment';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport CostAction from 'utils/actions/CostAction';\r\nimport Pagination from './Pagination';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\n\r\nexport default function SoilTable(props) {\r\n    //global state\r\n    const { app, soil } = useContext(StateContext);\r\n    const { soilDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const [page, setPage] = useState(1);\r\n    const endArray = useState(false);\r\n    const [end, setEnd] = endArray;\r\n\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const table = \"soil_cost_table\";\r\n        const season_id = Utils.getCurrentSeason().id;\r\n\r\n        const source = CostAction.getSource();\r\n        if (!end) {\r\n            CostAction.getInstance(soilDispatch).getPaginateData(table, season_id, page)\r\n                .then(res => {\r\n                    //console.log(`${table}list `, res.message, res.data);\r\n                    setEnd(false)\r\n                })\r\n                .catch(e => {\r\n                    console.log(`${table} error `, e.message);\r\n                    setEnd(true)\r\n                    setPage(prev => prev - 1)\r\n                });\r\n        }\r\n        //cleanup\r\n        return () => {\r\n            console.log(`${table} clean up `);\r\n            source.cancel();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [page, app.reload]);\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = soil.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n                <Pagination endArray={endArray} setPage={setPage} />\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Car Quantity</th>\r\n                                <th>Per Car Price</th>\r\n                                <th>Total Amount</th>\r\n                                <th>Paid Amount</th>\r\n                                <th>Due Amount</th>\r\n                                <th>Contractor Name</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {/* <tfoot>\r\n                            <tr>\r\n                                <th>Total</th>\r\n                                <th>{total.sum_soil_car_quantity}</th>\r\n                                <th></th>\r\n                                <th>{total.sum_total_amount}</th>\r\n                                <th>{total.sum_paid_amount}</th>\r\n                                <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </tfoot> */}\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n                                soil.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.soil_car_quantity}</td>\r\n                                        <td>{item.soil_per_car_price}</td>\r\n                                        <td>{item.total_amount}</td>\r\n                                        <td>{item.paid_amount}</td>\r\n                                        <td>{item.total_amount - item.paid_amount}</td>\r\n                                        <td>{item.contractor_name}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addSoilCostID\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Modal from './Modal';\r\nimport moment from 'moment'\r\nimport AppAction from './../../../utils/actions/AppAction';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from 'utils/actions/CostAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport Define from 'utils/helpers/Define';\r\n\r\nexport default function AddSoilCostModal(props) {\r\n    //global state\r\n    const { appDispatch, soilDispatch } = useContext(DispatchContext);\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            //add extra fields\r\n            input.total_amount = input.soil_car_quantity * input.soil_per_car_price;\r\n            if (input.id === undefined) {\r\n                //add new info\r\n                CostAction.getInstance(soilDispatch).addData(\"v1/post/soil_cost_table/\", input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    })\r\n            } else {\r\n                //update existing info\r\n                CostAction.getInstance(soilDispatch).updateData(`v1/put/soil_cost_table/${input.id}`, input, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n\r\n    const isValidField = () => {\r\n        if (input.soil_car_quantity === \"\" || input.soil_per_car_price === \"\" || input.paid_amount === \"\" || input.contractor_name === \"\" || input.transaction_date === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add Soil Cost\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"soil_car_quantity\"\r\n                                    placeholder=\"Soil Car Quantity\"\r\n                                    value={input.soil_car_quantity}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"soil_per_car_price\"\r\n                                    value={input.soil_per_car_price}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Soil Per Car Price\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"paid_amount\"\r\n                                    value={input.paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Paid Amount\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"transaction_date\"\r\n                                    value={moment(input.transaction_date).format(Define.DATE_FORMAT_SIMPLE)}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"(e.g. 2020-02-26)\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"contractor_name\"\r\n                                    value={input.contractor_name}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Soil Contractor Name\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Page from 'components/layouts/basic/Page'\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport SoilTable from 'components/layouts/tables/SoilTable';\r\nimport AddSoilCostModal from 'components/layouts/modal/AddSoilCostModal';\r\nimport moment from 'moment';\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function Soil() {\r\n    //local state\r\n    const initState = {\r\n        season_id: Utils.getCurrentSeason().id,\r\n        soil_car_quantity: \"\",\r\n        soil_per_car_price: \"\",\r\n        paid_amount: \"\",\r\n        contractor_name: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE)\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddSoilCostModal id=\"addSoilCostID\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Soil Payment Info</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addSoilCostID\">\r\n                        Add Soil Payment Info</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <SoilTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport CostAction from 'utils/actions/CostAction';\r\nimport Pagination from './Pagination';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function TaxTable(props) {\r\n    //global state\r\n    const { app, tax } = useContext(StateContext);\r\n    const { taxDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const [page, setPage] = useState(1);\r\n    const endArray = useState(false);\r\n    const [end, setEnd] = endArray;\r\n\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const table = \"tax_cost_table\";\r\n        const season_id = Utils.getCurrentSeason().id;\r\n\r\n        let source = CostAction.getSource();\r\n\r\n        if (!end) {\r\n            CostAction.getInstance(taxDispatch)\r\n                .getPaginateData(table, season_id, page)\r\n                .then(res => {\r\n                    //console.log(`${table}list `, res.message, res.data);\r\n                    setEnd(false)\r\n                })\r\n                .catch(e => {\r\n                    console.log(`${table} error `, e.message);\r\n                    setEnd(true)\r\n                    setPage(prev => prev - 1)\r\n                });\r\n        }\r\n        //clear up\r\n        return () => {\r\n            console.log(\"clean up called tax\")\r\n            source.cancel();\r\n        }\r\n    }, [page, app.reload]);\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = tax.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n                <Pagination endArray={endArray} setPage={setPage} />\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Tax Cost Title</th>\r\n                                <th>Total Amount</th>\r\n                                <th>Paid Amount</th>\r\n                                <th>Due Amount</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {/* <tfoot>\r\n                            <tr>\r\n                                <th>Total</th>\r\n                                <th></th>\r\n                                <th>{total.sum_total_amount}</th>\r\n                                <th>{total.sum_paid_amount}</th>\r\n                                <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </tfoot> */}\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n                                tax.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.tax_title}</td>\r\n                                        <td>{item.total_amount}</td>\r\n                                        <td>{item.paid_amount}</td>\r\n                                        <td>{item.total_amount - item.paid_amount}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addTaxCostID\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Modal from './Modal';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport moment from 'moment'\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from 'utils/actions/CostAction';\r\n\r\nexport default function AddTaxCostModal(props) {\r\n    //global state\r\n    const { appDispatch, taxDispatch } = useContext(DispatchContext);\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value });\r\n    }\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            if (input.id === undefined) {\r\n                //add new info\r\n                CostAction.getInstance(taxDispatch).addData(\"v1/post/tax_cost_table/\", input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Tax Cost info added Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    })\r\n            } else {\r\n                //update existing info\r\n                CostAction.getInstance(taxDispatch).updateData(`v1/put/tax_cost_table/${input.id}`, input, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Tax Cost info updated Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n    const isValidField = () => {\r\n        if (input.tax_title === \"\" || input.total_amount === \"\" || input.paid_amount === \"\" || input.transaction_date === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal id={props.id}\r\n            title=\"Add Tax Cost\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"tax_title\"\r\n                                    value={input.tax_title}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Tax Title\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"total_amount\"\r\n                                    value={input.total_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Total Amount\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"paid_amount\"\r\n                                    value={input.paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Paid Amount\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"transaction_date\"\r\n                                    value={moment(input.transaction_date).format(Define.DATE_FORMAT_SIMPLE)}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"(e.g. 2020-02-26)\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport TaxTable from 'components/layouts/tables/TaxTable';\r\nimport AddTaxCostModal from './../../layouts/modal/AddTaxCostModal';\r\nimport moment from 'moment';\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function Tax() {\r\n    //local state\r\n    let initState = {\r\n        season_id: Utils.getCurrentSeason().id,\r\n        tax_title: \"\",\r\n        total_amount: \"\",\r\n        paid_amount: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddTaxCostModal id=\"addTaxCostID\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Tax Cost Info</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addTaxCostID\">\r\n                        Add Tax Cost</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <TaxTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport CostAction from 'utils/actions/CostAction';\r\nimport Utils from 'utils/helpers/Utils';\r\nimport Pagination from './Pagination';\r\nexport default function OtherCostTable(props) {\r\n    //global state\r\n    const { app, otherCost } = useContext(StateContext);\r\n    const { otherCostDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const [page, setPage] = useState(1);\r\n    const endArray = useState(false);\r\n    const [end, setEnd] = endArray;\r\n\r\n    //lifecycle method\r\n    useEffect(() => {//otherCostDispatch//DAILY_OTHER_COST_TABLE\r\n        const table = \"daily_other_cost_table\";\r\n        const season_id = Utils.getCurrentSeason().id;\r\n\r\n        //now we will fetch all data of last 1 year\r\n        const source = CostAction.getSource();\r\n        if (!end) {\r\n            CostAction.getInstance(otherCostDispatch)\r\n                .getPaginateData(table, season_id, page)\r\n                .then(res => {\r\n                    //console.log(`${table}list `, res.message, res.data);\r\n                    setEnd(false)\r\n                })\r\n                .catch(e => {\r\n                    console.log(`${table} error `, e.message);\r\n                    setEnd(true)\r\n                    setPage(prev => prev - 1)\r\n                });\r\n        }\r\n        //cleanup\r\n        return () => {\r\n            console.log(`${table} clean up `);\r\n            source.cancel();\r\n        } // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [page, app.reload]);\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = otherCost.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n                <Pagination endArray={endArray} setPage={setPage} />\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Other Cost Title</th>\r\n                                <th>Other Cost Description</th>\r\n                                <th>Total Amount</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {/* <tfoot>\r\n                            <tr>\r\n                                <th>Total</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>{total.sum_total_amount}</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </tfoot> */}\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n                                otherCost.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.other_cost_title}</td>\r\n                                        <td>{item.other_cost_details}</td>\r\n                                        <td>{item.total_amount}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addOtherCostID\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Modal from './Modal';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from 'utils/actions/CostAction';\r\nimport moment from 'moment';\r\nimport Define from 'utils/helpers/Define';\r\n\r\nexport default function AddOtherCostModal(props) {\r\n\r\n    //global state\r\n    const { appDispatch, otherCostDispatch } = useContext(DispatchContext);\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value });\r\n    }\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            if (input.id === undefined) {\r\n                //add new info\r\n                CostAction.getInstance(otherCostDispatch).addData(\"v1/post/daily_other_cost_table/\", input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Daily Other Cost info added Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    })\r\n            } else {\r\n                //update existing info\r\n                CostAction.getInstance(otherCostDispatch).updateData(`v1/put/daily_other_cost_table/${input.id}`, input, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Daily Other Cost info updated Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n\r\n        }\r\n    }\r\n    const isValidField = () => {\r\n        if (input.other_cost_title === \"\" || input.total_amount === \"\" || input.other_cost_details === \"\" || input.transaction_date === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal id={props.id}\r\n            title=\"Add Other Cost\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"other_cost_title\"\r\n                                    value={input.other_cost_title}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Other Cost Title\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"total_amount\"\r\n                                    value={input.total_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Total Amount\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"transaction_date\"\r\n                                    value={moment(input.transaction_date).format(Define.DATE_FORMAT_SIMPLE)}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"(e.g. 2020-02-26)\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <textarea className=\"form-control\" rows=\"3\"\r\n                                    name=\"other_cost_details\"\r\n                                    value={input.other_cost_details}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"(e.g. add extra cost details)\"\r\n                                ></textarea>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport OtherCostTable from 'components/layouts/tables/OtherCostTable';\r\nimport AddOtherCostModal from './../../layouts/modal/AddOtherCostModal';\r\nimport moment from 'moment'\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\n\r\nexport default function OtherCost() {\r\n    //local state\r\n    let initState = {\r\n        season_id: Utils.getCurrentSeason().id,\r\n        other_cost_title: \"\",\r\n        other_cost_details: \"\",\r\n        total_amount: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddOtherCostModal id=\"addOtherCostID\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Daily Other Cost Info</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addOtherCostID\">\r\n                        Add Daily Other Cost</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <OtherCostTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useEffect, useContext } from 'react'\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\nexport default function LandLordListTable() {\r\n    //global state\r\n    const { landlordlist } = useContext(StateContext);\r\n    const { landlordlistDispatch } = useContext(DispatchContext);\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        //now we will fetch all data\r\n        const source = CostAction.getSource();\r\n        CostAction.getInstance(landlordlistDispatch)\r\n            .getAll(\"land_loard_list_table\")\r\n            .then(res => {\r\n                //console.log(\"land lord list \", res.message, res.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n        //cleanup\r\n        return () => {\r\n            console.log(\"clean up called land lord list\")\r\n            source.cancel();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [landlordlist.length]);\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Land Lord ID</th>\r\n                                <th>Land Lord Name</th>\r\n                                <th>Land Quantity</th>\r\n                                <th>Rent Per Year</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                landlordlist.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{item.id}</td>\r\n                                        <td>{item.land_lord_name}</td>\r\n                                        <td>{item.land_quantity}</td>\r\n                                        <td>{item.land_rent_per_year}</td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport Modal from './Modal';\r\n\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\nexport default function LandLordListModal(props) {\r\n    //global state\r\n    const { appDispatch, landlordlistDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const initState = {\r\n        land_lord_name: \"\",\r\n        land_quantity: \"\",\r\n        land_rent_per_year: \"\"\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const isValidField = () => {\r\n        if (input.land_lord_name === \"\" || input.land_quantity === \"\" || input.land_rent_per_year === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            CostAction.getInstance(landlordlistDispatch).addData(\"v1/post/land_loard_list_table/\", input)\r\n                .then(res => {\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                    setInput(initState);\r\n                }).catch(e => {\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add New Land Lord\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"land_lord_name\"\r\n                                    placeholder=\"Land Lord Name\"\r\n                                    value={input.land_lord_name}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"land_quantity\"\r\n                                    value={input.land_quantity}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Land Quantity\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"land_rent_per_year\"\r\n                                    value={input.land_rent_per_year}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Total Rent Per Year\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport LandLordListTable from '../../layouts/tables/LandLordListTable';\r\nimport LandLordListModal from './../../layouts/modal/LandLordListModal';\r\n\r\nexport default function LandLordList() {\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <LandLordListModal id=\"landLordListID\" />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Land Lord List</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#landLordListID\">\r\n                        Add Land Lord Info</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <LandLordListTable />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\n\r\n\r\nexport default function Filter(props) {\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <button type=\"button\" className=\"btn btn-outline-primary badge-pill px-3\"\r\n                    data-toggle=\"collapse\" data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\"\r\n                >Filter By Date Range</button>\r\n\r\n                <div className=\"collapse mt-3\" id=\"collapseExample\">\r\n                    <div className=\"card card-body\">\r\n                        <DateRangePicker\r\n                            onChange={item => props.setDate([item.selection])}\r\n                            showSelectionPreview={true}\r\n                            moveRangeOnFirstSelection={false}\r\n                            months={2}\r\n                            ranges={props.date}\r\n                            direction=\"horizontal\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport moment from 'moment';\r\nimport Filter from './Filter';\r\nimport Define from './../../../utils/helpers/Define';\r\n\r\nexport default function LandLordCostTable(props) {\r\n    //global state\r\n    const { landlordcost } = useContext(StateContext);\r\n    const { landlordcostDispatch, landlordlistDispatch } = useContext(DispatchContext);\r\n\r\n    //local state\r\n    let firstDayOfYear = moment().startOf('year').format(Define.DATE_FORMAT_SIMPLE);\r\n    const [date, setDate] = useState([\r\n        {\r\n            startDate: new Date(firstDayOfYear),\r\n            endDate: new Date(),\r\n            key: 'selection'\r\n        }\r\n    ]);\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const start = moment(date[0].startDate).format(Define.DATE_FORMAT_SIMPLE);\r\n        const end = moment(date[0].endDate).format(Define.DATE_FORMAT_SIMPLE);\r\n\r\n        const main_table = \"land_loard_cost_table\";\r\n        const main_id = \"land_lord_id\";//we need this id\r\n        const join_table = \"land_loard_list_table\";\r\n        const join_id = \"id\";\r\n        //now we will fetch all data of last 1 year\r\n\r\n        const source = CostAction.getSource();\r\n        CostAction.getInstance(landlordcostDispatch)\r\n            .getAllJoinData(main_table, main_id, join_table, join_id, start, end)\r\n            .then(res => {\r\n                //console.log(\"land lord Cost list \", res.message, res.data);\r\n                //do it after one is done\r\n                CostAction.getInstance(landlordlistDispatch)\r\n                    .getAll(\"land_loard_list_table\")\r\n                    .then(res => {\r\n                        //console.log(\"land lord list 2\", res.message, res.data);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e.message);\r\n                    });\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n        //cleanup\r\n        return () => {\r\n            console.log(\"clean up called land lord Cost\")\r\n            source.cancel();\r\n        }\r\n    }, [date, landlordcost.length]);\r\n\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = landlordcost.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            //console.log(arr[0])\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"card shadow mb-4\">\r\n                <div className=\"card-header py-3\">\r\n                    <Filter date={date} setDate={setDate} />\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-striped table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Date</th>\r\n                                    <th>Land Lord Name</th>\r\n                                    <th>Rent Per Year</th>\r\n                                    <th>Paid Amount</th>\r\n                                    <th>Due Amount</th>\r\n                                    <th>Edit</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {/* <tfoot>\r\n                                <tr>\r\n                                    <th>Total</th>\r\n                                    <th>{total.sum_total_coal_weight}</th>\r\n                                    <th>{total.sum_total_amount}</th>\r\n                                    <th>{total.sum_paid_amount}</th>\r\n                                    <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </tfoot> */}\r\n                            <tbody onClick={onClickHandle}>\r\n                                {\r\n                                    landlordcost.map((item) => {\r\n                                        return (<tr key={item.id} >\r\n                                            <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                            <td>{item.land_lord_name}</td>\r\n                                            <td>{item.land_rent_per_year}</td>\r\n                                            <td>{item.paid_amount}</td>\r\n                                            <td>{(item.land_rent_per_year - item.paid_amount)}</td>\r\n                                            <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#LandLordCost\"></i></td>\r\n                                        </tr>)\r\n                                    })\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport moment from 'moment';\r\nimport Modal from './Modal';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\n\r\nexport default function LandLordCostModal(props) {\r\n    //global state\r\n    const { appDispatch, landlordcostDispatch } = useContext(DispatchContext);\r\n    const { landlordlist, landlordcost } = useContext(StateContext);\r\n\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        if (input.id === undefined) {\r\n            //console.log(\"not disabled\");\r\n            document.getElementById(\"selectNameID\").disabled = false;\r\n        } else {\r\n            console.log(\"disabled\");\r\n            document.getElementById(\"selectNameID\").disabled = true;\r\n        }\r\n    }, [input.id]);\r\n\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const isValidField = () => {\r\n        if (input.land_lord_id === \"\" || input.paid_amount === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const alredyAdded = () => {\r\n        let arr = landlordcost.filter(item => {\r\n            let time = moment(item.transaction_date).isSame(input.transaction_date, 'year');  // true\r\n            return (item.land_lord_id == input.land_lord_id) && (time);\r\n        });\r\n        if (arr.length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        alredyAdded();\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            if (input.id === undefined) {\r\n                //try to add new object\r\n                if (alredyAdded()) {\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Already Added this information.\", \"try to edit existing information\", \"danger\"));\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                } else {\r\n                    CostAction.getInstance(landlordcostDispatch).addData(\"v1/post/land_loard_cost_table/\", input)\r\n                        .then(res => {\r\n                            AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                            setInput(initState);\r\n                        }).catch(e => {\r\n                            AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                        });\r\n                }\r\n\r\n            } else {\r\n                const newinput = {};\r\n                newinput.id = input.id;\r\n                newinput.paid_amount = parseFloat(input.paid_amount);\r\n                newinput.land_lord_id = input.land_lord_id;\r\n                //try to update old object\r\n                CostAction.getInstance(landlordcostDispatch).updateData(`v1/put/land_loard_cost_table/${input.id}`, newinput, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add Land Lord Cost\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <select id=\"selectNameID\" className=\"form-control\" value={input.land_lord_id} name=\"land_lord_id\" onChange={onChange} >\r\n                                    <option value=\"\">select name</option>\r\n                                    {landlordlist.map(item => {\r\n                                        return <option key={item.id} value={item.id}>{item.land_lord_name}</option>\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"paid_amount\"\r\n                                    value={input.paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Paid Amount\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport LandLordCostTable from '../../layouts/tables/LandLordCostTable';\r\nimport LandLordCostModal from './../../layouts/modal/LandLordCostModal';\r\n\r\nimport moment from 'moment';\r\nimport Define from './../../../utils/helpers/Define';\r\n\r\nexport default function LandLordCost() {\r\n\r\n    const initState = {\r\n        land_lord_id: \"\",\r\n        paid_amount: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <LandLordCostModal id=\"LandLordCost\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Land Lord Cost Info</h3>\r\n                    <p>Showing current year full history by default</p>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#LandLordCost\">\r\n                        Add Land Lord Cost</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <LandLordCostTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useEffect, useContext } from 'react'\r\nimport moment from 'moment'\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport Define from 'utils/helpers/Define';\r\n\r\n\r\nexport default function StaffListTable() {\r\n    //global state\r\n    const { stafflist } = useContext(StateContext);\r\n    const { stafflistDispatch } = useContext(DispatchContext);\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        //now we will fetch all data\r\n        const source = CostAction.getSource();\r\n        CostAction.getInstance(stafflistDispatch)\r\n            .getAll(\"staff_list_table\")\r\n            .then(res => {\r\n                //console.log(\"Staff list table \", res.message, res.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n        //cleanup\r\n        return () => {\r\n            console.log(\"clean up called Staff list table\")\r\n            source.cancel();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [stafflist.length]);\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Staff ID</th>\r\n                                <th>Staff Name</th>\r\n                                <th>Staff Salary</th>\r\n                                <th>Staff Position</th>\r\n                                <th>Staff Join Date</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                stafflist.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{item.id}</td>\r\n                                        <td>{item.staff_name}</td>\r\n                                        <td>{item.staff_salary}</td>\r\n                                        <td>{item.staff_position}</td>\r\n                                        <td>{moment(item.staff_join_date).format(Define.DATE_FORMAT_SIMPLE)}</td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport Modal from './Modal';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\nexport default function AddNewStaffModal(props) {\r\n    //global state\r\n    const { appDispatch, stafflistDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const initState = {\r\n        staff_name: \"\",\r\n        staff_salary: \"\",\r\n        staff_position: \"\",\r\n        staff_join_date: new Date(),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const isValidField = () => {\r\n        if (input.staff_name === \"\" || input.staff_salary === \"\" || input.staff_position === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            CostAction.getInstance(stafflistDispatch).addData(\"v1/post/staff_list_table/\", input)\r\n                .then(res => {\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                    setInput(initState);\r\n                }).catch(e => {\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add New Staff\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"staff_name\"\r\n                                    placeholder=\"Staff Name\"\r\n                                    value={input.staff_name}\r\n                                    onChange={onChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"staff_salary\"\r\n                                    value={input.staff_salary}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Staff Salary\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"staff_position\"\r\n                                    value={input.staff_position}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Staff Position\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport StaffListTable from 'components/layouts/tables/StaffListTable';\r\nimport AddNewStaffModal from './../../layouts/modal/AddNewStaffModal';\r\n\r\nexport default function StaffList() {\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddNewStaffModal id=\"addNewStaffID\" />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Office Staff List</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addNewStaffID\">\r\n                        Add New Staff</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <StaffListTable />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport moment from 'moment';\r\nimport Filter from './Filter';\r\nimport Define from './../../../utils/helpers/Define';\r\n\r\nexport default function StaffSalaryTable(props) {\r\n\r\n    //global state\r\n    const { staffsalary } = useContext(StateContext);\r\n    const { staffsalaryDispatch, stafflistDispatch } = useContext(DispatchContext);\r\n\r\n    //local state\r\n    let firstDayOfMonth = moment().startOf('month').format(Define.DATE_FORMAT_SIMPLE);\r\n    const [date, setDate] = useState([\r\n        {\r\n            startDate: new Date(firstDayOfMonth),\r\n            endDate: new Date(),\r\n            key: 'selection'\r\n        }\r\n    ]);\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const start = moment(date[0].startDate).format(Define.DATE_FORMAT_SIMPLE);\r\n        const end = moment(date[0].endDate).format(Define.DATE_FORMAT_SIMPLE);\r\n\r\n        const main_table = \"staff_salary_table\";\r\n        const main_id = \"staff_id\";//we need this id\r\n        const join_table = \"staff_list_table\";\r\n        const join_id = \"id\";\r\n        //now we will fetch all data of last 1 year\r\n\r\n        const source = CostAction.getSource();\r\n        CostAction.getInstance(staffsalaryDispatch)\r\n            .getAllJoinData(main_table, main_id, join_table, join_id, start, end)\r\n            .then(res => {\r\n                //console.log(\"staff salary list \", res.message, res.data);\r\n                //do it after one is done\r\n                CostAction.getInstance(stafflistDispatch)\r\n                    .getAll(\"staff_list_table\")\r\n                    .then(res => {\r\n                        //console.log(\"staff list inside cost\", res.message, res.data);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e.message);\r\n                    });\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n        //cleanup\r\n        return () => {\r\n            console.log(\"clean up called land lord Cost\")\r\n            source.cancel();\r\n        }\r\n    }, [date, staffsalary.length]);\r\n\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = staffsalary.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n                <Filter date={date} setDate={setDate} />\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Staff Name</th>\r\n                                <th>Staff Salary</th>\r\n                                <th>Paid Amount</th>\r\n                                <th>Due Amount</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {/* <tfoot>\r\n                                <tr>\r\n                                    <th>Total</th>\r\n                                    <th>{total.sum_total_coal_weight}</th>\r\n                                    <th>{total.sum_total_amount}</th>\r\n                                    <th>{total.sum_paid_amount}</th>\r\n                                    <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </tfoot> */}\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n                                staffsalary.map((item) => {\r\n                                    return (<tr key={item.id} >\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.staff_name}</td>\r\n                                        <td>{item.staff_salary}</td>\r\n                                        <td>{item.paid_amount}</td>\r\n                                        <td>{(item.staff_salary - item.paid_amount)}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addSalaryInfo\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport Modal from './Modal';\r\n\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\n\r\nexport default function AddStaffSalaryModal(props) {\r\n    //global state\r\n    const { appDispatch, staffsalaryDispatch } = useContext(DispatchContext);\r\n    const { stafflist, staffsalary } = useContext(StateContext);\r\n\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        if (input.id === undefined) {\r\n            //console.log(\"not disabled\");\r\n            document.getElementById(\"selectNameID\").disabled = false;\r\n        } else {\r\n            console.log(\"disabled\");\r\n            document.getElementById(\"selectNameID\").disabled = true;\r\n        }\r\n    }, [input.id]);\r\n\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const isValidField = () => {\r\n        if (input.staff_id === \"\" || input.paid_amount === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const alredyAdded = () => {\r\n        let arr = staffsalary.filter(item => {\r\n            let time = moment(item.transaction_date).isSame(input.transaction_date, 'month');  // true\r\n            return (item.staff_id == input.staff_id) && (time);\r\n        });\r\n        if (arr.length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        alredyAdded();\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            if (input.id === undefined) {\r\n                //try to add new object\r\n                if (alredyAdded()) {\r\n                    AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Already Added this information.\", \"try to edit existing information\", \"danger\"));\r\n                    AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                } else {\r\n                    CostAction.getInstance(staffsalaryDispatch).addData(\"v1/post/staff_salary_table/\", input)\r\n                        .then(res => {\r\n                            AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                            setInput(initState);\r\n                        }).catch(e => {\r\n                            AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                        });\r\n                }\r\n\r\n            } else {\r\n                const newinput = {};\r\n                newinput.id = input.id;\r\n                newinput.paid_amount = parseFloat(input.paid_amount);\r\n                newinput.staff_id = input.staff_id;\r\n                //try to update old object\r\n                CostAction.getInstance(staffsalaryDispatch).updateData(`v1/put/staff_salary_table/${input.id}`, newinput, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add Staff Salary\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <select id=\"selectNameID\" className=\"form-control\" value={input.staff_id} name=\"staff_id\" onChange={onChange} >\r\n                                    <option value=\"\">select name</option>\r\n                                    {stafflist.map(item => {\r\n                                        return <option key={item.id} value={item.id}>{item.staff_name}</option>\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"paid_amount\"\r\n                                    value={input.paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Paid Amount\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport moment from 'moment'\r\nimport Define from './../../../utils/helpers/Define';\r\nimport StaffSalaryTable from 'components/layouts/tables/StaffSalaryTable';\r\nimport AddStaffSalaryModal from './../../layouts/modal/AddStaffSalaryModal';\r\n\r\nexport default function StaffSalary() {\r\n    const initState = {\r\n        staff_id: \"\",\r\n        paid_amount: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n\r\n            <AddStaffSalaryModal id=\"addSalaryInfo\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Staff Salary Info</h3>\r\n                    <p>Showing current month full history by default</p>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addSalaryInfo\">\r\n                        Add Salary Info</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <StaffSalaryTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport moment from 'moment';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport Pagination from './Pagination';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function DailyLabourCostInfoTable(props) {\r\n    //global state\r\n    const { app, labourdailycost } = useContext(StateContext);\r\n    const { labourdailycostDispatch } = useContext(DispatchContext);\r\n\r\n    //local state\r\n    const [page, setPage] = useState(1);\r\n    const endArray = useState(false);\r\n    const [end, setEnd] = endArray\r\n\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const table = \"labour_daily_salary_table\";\r\n        const season_id = Utils.getCurrentSeason().id;\r\n\r\n        //now we will fetch all data of last 1 year\r\n        const source = CostAction.getSource();\r\n        if (!end) {\r\n            CostAction.getInstance(labourdailycostDispatch)\r\n                .getPaginateData(table, season_id, page)\r\n                .then(res => {\r\n                    //console.log(`${table}list `, res.message, res.data);\r\n                    setEnd(false)\r\n                })\r\n                .catch(e => {\r\n                    console.log(`${table} error `, e);\r\n                    setEnd(true)\r\n                    setPage(prev => prev - 1)\r\n                });\r\n        }\r\n        //cleanup\r\n        return () => {\r\n            console.log(`${table} clean up `);\r\n            source.cancel();\r\n        } // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [page, app.reload]);\r\n\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = labourdailycost.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header\">\r\n                <Pagination endArray={endArray} setPage={setPage} />\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Labour Name</th>\r\n                                <th>Labour Daily Salary</th>\r\n                                <th>Paid Amount</th>\r\n                                <th>Due Amount</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {/* <tfoot>\r\n                                <tr>\r\n                                    <th>Total</th>\r\n                                    <th>{total.sum_total_coal_weight}</th>\r\n                                    <th>{total.sum_total_amount}</th>\r\n                                    <th>{total.sum_paid_amount}</th>\r\n                                    <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </tfoot> */}\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n                                labourdailycost.map((item) => {\r\n                                    return (<tr key={item.id} >\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.labour_name}</td>\r\n                                        <td>{item.labour_daily_salary}</td>\r\n                                        <td>{item.paid_amount}</td>\r\n                                        <td>{(item.labour_daily_salary - item.paid_amount)}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addDailyLabourCostInfo\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Modal from './Modal';\r\n\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from './../../../utils/helpers/Response';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\n\r\nexport default function AddDailyLabourCostModal(props) {\r\n    //global state\r\n    const { appDispatch, labourdailycostDispatch } = useContext(DispatchContext);\r\n\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const isValidField = () => {\r\n        if (input.labour_name === \"\" || input.labour_daily_salary === \"\" || input.paid_amount === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            AppAction.getInstance(appDispatch).START_LOADING();\r\n            if (input.id === undefined) {\r\n                //try to add new object\r\n                CostAction.getInstance(labourdailycostDispatch).addData(\"v1/post/labour_daily_salary_table/\", input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n\r\n            } else {\r\n                //try to update old object\r\n                CostAction.getInstance(labourdailycostDispatch).updateData(`v1/put/labour_daily_salary_table/${input.id}`, input, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Cost info added Successfully `, \"success\"));\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add Daily Labour Cost\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"labour_name\"\r\n                                    value={input.labour_name}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Labour Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"labour_daily_salary\"\r\n                                    value={input.labour_daily_salary}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Labour Daily Salary\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"paid_amount\"\r\n                                    value={input.paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Paid Amount\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport moment from 'moment'\r\nimport Define from './../../../utils/helpers/Define';\r\nimport DailyLabourCostInfoTable from './../../layouts/tables/DailyLabourCostInfoTable';\r\nimport AddDailyLabourCostModal from './../../layouts/modal/AddDailyLabourCostModal';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function LabourDailyCost() {\r\n    //local state\r\n    const initState = {\r\n        season_id: Utils.getCurrentSeason().id,\r\n        labour_name: \"\",\r\n        labour_daily_salary: \"\",\r\n        paid_amount: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n\r\n            <AddDailyLabourCostModal id=\"addDailyLabourCostInfo\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Daily Labour Cost Info Info</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addDailyLabourCostInfo\">\r\n                        Add Daily Labour Info</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <DailyLabourCostInfoTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport Utils from 'utils/helpers/Utils';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport Define from './../../../utils/helpers/Define';\r\n\r\nexport default function ShorderTable(props) {\r\n    //global state\r\n    const { sharderList } = useContext(StateContext);\r\n    const { sharderListDispatch } = useContext(DispatchContext);\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName === \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = sharderList.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            //console.log(arr[0])\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n    //lifecycle method\r\n    /**\r\n     * \r\n      SELECT shorder_info_table.*,COALESCE(sum(brick_built_cost_table.weekly_early_bill_paid), 0) FROM shorder_info_table LEFT JOIN brick_built_cost_table on brick_built_cost_table.shorder_id=shorder_info_table.id where `shorder_type`='MIL_TYPE' GROUP by brick_built_cost_table.shorder_id order by shorder_info_table.id\r\n\r\n     */\r\n\r\n    useEffect(() => {\r\n        const type = Define.NO_TYPE;\r\n        const season_id = Utils.getCurrentSeason().id;\r\n\r\n        const source = CostAction.getSource();\r\n        CostAction.getInstance(sharderListDispatch)\r\n            .getBrickBuiltCost(type, season_id)\r\n            .then(res => {\r\n                //console.log(\"sharder list \", res.message, res.data);\r\n                //do it after one is done\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n        //cleanup\r\n        return () => {\r\n            console.log(\"clean up called sharder list\")\r\n            source.cancel();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n\r\n    }, [sharderList.length]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card shadow mb-4\">\r\n\r\n                <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-striped table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Sharder Name</th>\r\n                                    <th>Sharder Type</th>\r\n                                    <th>Advance Paid Amount</th>\r\n                                    <th>Cleared Advance Amount</th>\r\n                                    <th>Due Cleared Amount</th>\r\n                                    <th>Edit</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {/* <tfoot>\r\n                                <tr>\r\n                                    <th>{total.sum_total_coal_weight}</th>\r\n                                    <th>{total.sum_total_amount}</th>\r\n                                    <th>{total.sum_paid_amount}</th>\r\n                                    <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </tfoot> */}\r\n                            <tbody onClick={onClickHandle}>\r\n                                {\r\n                                    sharderList.map((item) => {\r\n                                        return (<tr key={item.id} >\r\n                                            <td>{item.shorder_name}</td>\r\n                                            <td>{item.shorder_type}</td>\r\n                                            <td>{item.early_paid_amount}</td>\r\n                                            <td>{item.cleared_early_amount}</td>\r\n                                            <td>{(item.early_paid_amount - item.cleared_early_amount).toString()}</td>\r\n                                            <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addNewShorder\" data-backdrop=\"static\" ></i></td>\r\n                                        </tr>)\r\n                                    })\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport Modal from './Modal';\r\nimport { DispatchContext } from 'utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from 'utils/helpers/Response';\r\nimport CostAction from 'utils/actions/CostAction';\r\nimport Define from './../../../utils/helpers/Define';\r\n\r\nexport default function AddNewShorderModal(props) {\r\n    const types = [Define.MIL_TYPE, Define.KACHA_TYPE, Define.PAKA_TYPE, Define.JAB_TYPE];\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n    //global\r\n    //const { sharderList } = useContext(StateContext);\r\n    const { sharderListDispatch, appDispatch } = useContext(DispatchContext);\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const isValidField = () => {\r\n        if (input.shorder_name === \"\" || input.early_paid_amount === \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    const onSubmit = () => {\r\n        const table_name = 'shorder_info_table';\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            if (input.id === null) {\r\n                //add new item\r\n                AppAction.getInstance(appDispatch).START_LOADING();\r\n                CostAction.getInstance(sharderListDispatch).addData(`v1/post/${table_name}/`, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Sharder info added Successfully `, \"success\"));\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n            } else {\r\n                //update existing info\r\n                //remove the extra filed (cleared_early_amount)\r\n                var newinput = { ...input }\r\n                delete newinput.cleared_early_amount;\r\n                //url,udate_input,payload\r\n                CostAction.getInstance(sharderListDispatch).updateData(`v1/put/${table_name}/${input.id}`, newinput, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `Sharder info updated Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        if (input.id === null) {\r\n            //console.log(\"not disabled\");\r\n            document.getElementById(\"selectTypeID\").disabled = false;\r\n        } else {\r\n            console.log(\"disabled\");\r\n            document.getElementById(\"selectTypeID\").disabled = true;\r\n        }\r\n    }, [input.shorder_type]);\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add New Sharder\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"shorder_name\"\r\n                                    value={input.shorder_name}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Shorder Name e.g. Rahim (1-no Mil) / Karim (Kacha)\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"early_paid_amount\"\r\n                                    value={input.early_paid_amount}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Early Paid Amount\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\">Select Shorder Type</label> */}\r\n                                <select id=\"selectTypeID\" className=\"form-control\" value={input.shorder_type} name=\"shorder_type\" onChange={onChange} >\r\n                                    <option value=\"\">Select shorder type</option>\r\n                                    {types.map(item => {\r\n                                        return <option key={item} value={item}>{item}</option>\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport ShorderTable from 'components/layouts/tables/ShorderTable';\r\nimport Page from '../../layouts/basic/Page';\r\nimport AddNewShorderModal from 'components/layouts/modal/AddNewShorderModal';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function ShorderList() {\r\n    const initState = {\r\n        id: null,\r\n        season_id: Utils.getCurrentSeason().id,\r\n        shorder_name: \"\",\r\n        shorder_type: \"\",\r\n        early_paid_amount: \"\",\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddNewShorderModal id=\"addNewShorder\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Shorder List</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addNewShorder\" data-backdrop=\"static\">\r\n                        Add New Shorder</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <ShorderTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport Modal from './Modal';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from './../../../utils/actions/CostAction';\r\nimport AppAction from './../../../utils/actions/AppAction';\r\nimport Response from 'utils/helpers/Response';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\n\r\nexport default function AddBrickBuiltCostModal(props) {\r\n    const types = [Define.MIL_TYPE, Define.KACHA_TYPE, Define.PAKA_TYPE, Define.JAB_TYPE];\r\n    //props\r\n    const { input, setInput, initState } = props.value;\r\n    //global\r\n    const { sharderList } = useContext(StateContext);\r\n    const { sharderListDispatch, brickbuiltcostDispatch, appDispatch } = useContext(DispatchContext);\r\n    //local state\r\n    const [newSharderList, setNewSharderList] = useState([]);\r\n\r\n    //local method\r\n    const onChange = (e) => {\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n    const isValidField = () => {\r\n        if (input.cost_type === \"\" || input.shorder_id === \"\"\r\n            || input.weekly_bill === \"\" || input.weekly_brick_quantity === \"\"\r\n            || input.weekly_cash_bill_paid === \"\" || input.weekly_early_bill_paid === \"\"\r\n        ) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    const onSubmit = () => {\r\n        const table_name = 'brick_built_cost_table';\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            if (input.id === null) {\r\n                //add new item\r\n                AppAction.getInstance(appDispatch).START_LOADING();\r\n                CostAction.getInstance(brickbuiltcostDispatch).addData(`v1/post/${table_name}/`, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `BB Cost added Successfully `, \"success\"));\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n            } else {\r\n                //update existing info\r\n                //remove the extra filed (cleared_early_amount)\r\n                var newinput = { ...input }\r\n                delete newinput.shorder_name;\r\n                delete newinput.shorder_type;\r\n                delete newinput.early_paid_amount;\r\n                //url,udate_input,payload\r\n                CostAction.getInstance(brickbuiltcostDispatch).updateData(`v1/put/${table_name}/${input.id}`, newinput, input)\r\n                    .then(res => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, res.message, `BB cost info updated Successfully `, \"success\"));\r\n                        AppAction.getInstance(appDispatch).RELOAD();\r\n                        setInput(initState);\r\n                    }).catch(e => {\r\n                        AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                        AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n                    });\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n                setInput(initState);\r\n            }\r\n        }\r\n    }\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        const season_id = Utils.getCurrentSeason().id;\r\n        const source = CostAction.getSource();\r\n        CostAction.getInstance(sharderListDispatch)\r\n            .getAllData(\"shorder_info_table\", season_id)\r\n            .then(res => {\r\n                //console.log(\"shorder list==\", res.message, res.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n        //clean up method\r\n        return () => {\r\n            console.log(\"clean up called shorder list in add BB cost\");\r\n            source.cancel();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [sharderList.length]);\r\n\r\n\r\n    useEffect(() => {\r\n        setNewSharderList(sharderList.filter(item => item.shorder_type === input.cost_type))\r\n    }, [input.cost_type]);\r\n\r\n\r\n    return (\r\n        <Modal\r\n            id={props.id}\r\n            title=\"Add Brick Built Cost Info\"\r\n            btnTitle=\"Submit Now\"\r\n            callback={onSubmit}\r\n            resetInput={{ setInput, initState }}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <form>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\">Select Shorder Type</label> */}\r\n                                <select id=\"selectTypeID\" className=\"form-control\" value={input.cost_type} name=\"cost_type\" onChange={onChange} >\r\n                                    <option value=\"\">Select cost type</option>\r\n                                    {types.map(item => {\r\n                                        return <option key={item} value={item}>{item}</option>\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\">Select Shorder Type</label> */}\r\n                                <select id=\"selectShorderID\" className=\"form-control\" value={input.shorder_id} name=\"shorder_id\" onChange={onChange} >\r\n                                    <option value=\"\">Select Shorder</option>\r\n                                    {newSharderList.map(item => {\r\n                                        return <option key={item.id} value={item.id}>{item.shorder_name}</option>\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"weekly_bill\"\r\n                                    value={input.weekly_bill}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"Weekly Bill\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"weekly_brick_quantity\"\r\n                                    value={input.weekly_brick_quantity}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"weekly brick quantity\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"weekly_cash_bill_paid\"\r\n                                    value={input.weekly_cash_bill_paid}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"weekly cash bill paid\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {/* <label htmlFor=\"\"></label> */}\r\n                                <input type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    name=\"weekly_early_bill_paid\"\r\n                                    value={input.weekly_early_bill_paid}\r\n                                    onChange={onChange}\r\n                                    placeholder=\"weekly early bill paid\" />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useContext } from 'react'\r\nimport moment from 'moment';\r\nimport { StateContext, DispatchContext } from 'utils/context/AppContext';\r\nimport CostAction from '../../../utils/actions/CostAction';\r\nimport Define from 'utils/helpers/Define';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function BrickBuiltCostTable(props) {\r\n    //global state\r\n    const { app, brickbuiltcost } = useContext(StateContext);\r\n    const { sharderListDispatch, brickbuiltcostDispatch } = useContext(DispatchContext);\r\n\r\n    //lifecycle method\r\n    useEffect(() => {\r\n        //now we will fetch all data\r\n\r\n        const maintable = \"brick_built_cost_table\";\r\n        const mainID = \"shorder_id\";\r\n        const jointable = \"shorder_info_table\";\r\n        const joinID = \"id\";\r\n\r\n        const season_id = Utils.getCurrentSeason().id;\r\n        const source = CostAction.getSource();\r\n\r\n        CostAction.getInstance(brickbuiltcostDispatch).getByJoinData(maintable, mainID, jointable, joinID, season_id)\r\n            .then(res => {\r\n                //console.log(\"brick_built_cost_table \", res.message, res.data);\r\n                //load all the sharder ....\r\n\r\n                CostAction.getInstance(sharderListDispatch)\r\n                    .getAllData(\"shorder_info_table\", season_id)\r\n                    .then(res => {\r\n                        //console.log(\"shorder list==\", res.message, res.data);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e.message);\r\n                    });\r\n\r\n            })\r\n            .catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n\r\n        //cleanup\r\n        return () => {\r\n            console.log(\"clean up called brick_built_cost_table\");\r\n            source.cancel();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, [brickbuiltcost.length, app.reload]);\r\n\r\n    //local method\r\n    const onClickHandle = (e) => {\r\n        if (e.target.nodeName == \"I\") {\r\n            const _id = e.target.id;\r\n            let arr = brickbuiltcost.filter((item) => {\r\n                return item.id === parseInt(_id)\r\n            });\r\n            props.setInput(arr[0]);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n                Filter Option...\r\n            </div>\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table id=\"example\" className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Cost Type</th>\r\n                                <th>Sharder Name</th>\r\n                                <th>Weekly Brick Quantity</th>\r\n                                <th>Weekly Bill</th>\r\n                                <th>Weekly Cash Bill Paid</th>\r\n                                <th>Weekly Early Bill Paid</th>\r\n                                <th>Weekly Due Bill</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tfoot>\r\n                            {/*<tr>\r\n                                 <th>Total</th>\r\n                                <th>{total.sum_total_coal_weight}</th>\r\n                                <th>{total.sum_total_amount}</th>\r\n                                <th>{total.sum_paid_amount}</th>\r\n                                <th>{total.sum_total_amount - total.sum_paid_amount}</th>\r\n                                <th></th>\r\n                                <th></th> \r\n                            </tr>*/}\r\n                        </tfoot>\r\n                        <tbody onClick={onClickHandle}>\r\n                            {\r\n\r\n                                brickbuiltcost.map((item) => {\r\n                                    return (<tr key={item.id}>\r\n                                        <td>{moment(item.transaction_date).format(Define.DATE_FORMAT)}</td>\r\n                                        <td>{item.cost_type}</td>\r\n                                        <td>{item.shorder_name}</td>\r\n                                        <td>{item.weekly_brick_quantity}</td>\r\n                                        <td>{item.weekly_bill}</td>\r\n                                        <td>{item.weekly_cash_bill_paid}</td>\r\n                                        <td>{item.weekly_early_bill_paid}</td>\r\n                                        <td>{(item.weekly_bill - (item.weekly_cash_bill_paid + item.weekly_early_bill_paid)).toString()}</td>\r\n                                        <td><i id={item.id} className=\"fa fa-edit\" data-toggle=\"modal\" data-target=\"#addBBCost\"></i></td>\r\n                                    </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import Alert from 'components/layouts/alert/Alert';\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport React, { useState } from 'react'\r\nimport Page from './../../layouts/basic/Page';\r\nimport AddBrickBuiltCostModal from './../../layouts/modal/AddBrickBuiltCostModal';\r\nimport moment from 'moment';\r\nimport Define from './../../../utils/helpers/Define';\r\nimport BrickBuiltCostTable from './../../layouts/tables/BrickBuiltCostTable';\r\nimport Utils from 'utils/helpers/Utils';\r\n\r\nexport default function MilList() {\r\n    //local\r\n    const initState = {\r\n        id: null,\r\n        season_id: Utils.getCurrentSeason().id,\r\n        cost_type: \"\",//sharder type\r\n        shorder_id: \"\",\r\n        weekly_brick_quantity: \"\",\r\n        weekly_bill: \"\",\r\n        weekly_cash_bill_paid: \"\",\r\n        weekly_early_bill_paid: \"\",\r\n        transaction_date: moment(new Date()).format(Define.DATE_FORMAT_SIMPLE),\r\n    };\r\n    const [input, setInput] = useState(initState);\r\n\r\n    return (\r\n        <Page>\r\n            {/* loading.... */}\r\n            <Alert />\r\n            <Loading color=\"info\" />\r\n            {/* form modal */}\r\n            <AddBrickBuiltCostModal id=\"addBBCost\" value={{ input, setInput, initState }} />\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-6\">\r\n                    <h3>Brick Built Cost</h3>\r\n                </div>\r\n                <div className=\"col-md-6 text-right\">\r\n                    {/* open modal form when click on it */}\r\n                    <button type=\"button\" className=\"btn btn-primary badge-pill px-4\" data-toggle=\"modal\" data-target=\"#addBBCost\" data-backdrop=\"static\">\r\n                        Add Brick Built Cost</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-3\">\r\n                <div className=\"col-md-12\">\r\n                    <BrickBuiltCostTable setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n","import Alert from 'components/layouts/alert/Alert';\r\nimport React, { useState, useContext } from 'react'\r\nimport Loading from 'components/layouts/alert/Loading';\r\nimport axios from 'axios';\r\nimport { DispatchContext } from './../../../utils/context/AppContext';\r\nimport AppAction from 'utils/actions/AppAction';\r\nimport Response from 'utils/helpers/Response';\r\n\r\nexport default function DbSetup() {\r\n    const [user, setUser] = useState({\r\n        user_name: \"\",\r\n        user_email: \"\",\r\n        user_phone_num: \"\",\r\n        user_password: \"\",\r\n        user_role: \"ADMIN\",\r\n        user_salary: 5000\r\n    });\r\n\r\n    const { appDispatch } = useContext(DispatchContext);\r\n\r\n\r\n    const createuser = () => {\r\n\r\n        axios.post('user/post/', user).then((res) => {\r\n            if (res.status === 200) {\r\n                //dispatch the global state\r\n                AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, \"User Created\", \"All Done !!!!!!!!\", \"success\"));\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n            } else {\r\n                AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"User Creation Failed\", \"\", \"danger\"));\r\n                AppAction.getInstance(appDispatch).STOP_LOADING();\r\n            }\r\n        }).catch((e) => {\r\n            console.error(\"erroe: \", e)\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"\", \"danger\"));\r\n            AppAction.getInstance(appDispatch).STOP_LOADING();\r\n        })\r\n    }\r\n    const startConfig = () => {\r\n        if (!isValidField()) {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, \"Empty Field Found\", \"Enter all feild value and try again\", \"danger\"));\r\n        } else {\r\n            startConfig1();\r\n        }\r\n    }\r\n\r\n    const startConfig1 = () => {\r\n        //api list\r\n        //const db = axios.get('db/createdb');\r\n\r\n        const user = axios.get('db/table/user_table');\r\n        const season = axios.get('db/table/seasons_table');\r\n        const tax = axios.get('db/table/tax_cost_table');\r\n        const coal = axios.get('db/table/coal_cost_table');\r\n        const soil = axios.get('db/table/soil_cost_table');\r\n        const other_cost = axios.get('db/table/daily_other_cost_table');\r\n        const land_load_list = axios.get('db/table/land_loard_list_table');\r\n        const land_load_cost = axios.get('db/table/land_loard_cost_table');\r\n        const staff_list = axios.get('db/table/staff_list_table');\r\n        const staff_salary = axios.get('db/table/staff_salary_table');\r\n        const labour_salary = axios.get('db/table/labour_daily_salary_table');\r\n        const shorder_info = axios.get('db/table/shorder_info_table');\r\n        const brick_built_cost = axios.get('db/table/brick_built_cost_table');\r\n\r\n        //check database is created already or not\r\n        AppAction.getInstance(appDispatch).START_LOADING();\r\n        Promise.all([\r\n            user,\r\n            season, tax,\r\n            coal, soil, other_cost,\r\n            land_load_list, land_load_cost,\r\n            staff_list, staff_salary,\r\n            labour_salary, shorder_info, brick_built_cost\r\n        ]).then(function (data) {\r\n\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(true, \"Done Setup\", \"Creating Admin For the system..\", \"info\"));\r\n            //\r\n            createuser();\r\n        }).catch(e => {\r\n            AppAction.getInstance(appDispatch).SET_RESPONSE(Response(false, e.message, \"Something Went Wrong! try again\", \"danger\"));\r\n        });\r\n\r\n        //     // .then(\r\n        //     // axios.spread((...data) => {\r\n\r\n        //     // })\r\n        // )\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setUser({ ...user, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const isValidField = () => {\r\n        let ck = true;\r\n        for (const [key, value] of Object.entries(user)) {\r\n            //console.log(\"error: \", `${key}: ${value}`);\r\n            if (value === \"\") {\r\n                ck = false;\r\n                break;\r\n            } else {\r\n                ck = true;\r\n            }\r\n        }\r\n        return ck;\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-dark vh-100\" >\r\n            <div className=\"container \">\r\n                {/* user form before config... */}\r\n                {/* <!-- Outer Row --> */}\r\n                <div className=\"row pt-3 \">\r\n                    <div className=\"m-auto\">\r\n                        <Alert />\r\n                        <Loading color=\"danger\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row pt-3\">\r\n                    <div className=\"m-auto\">\r\n                        <div className=\"form-row \">\r\n                            <div className=\"form-group col-md-12\">\r\n\r\n                                <label htmlFor=\"\">Admin User Email</label>\r\n                                <input type=\"email\"\r\n                                    className=\"form-control\"\r\n                                    name=\"user_email\"\r\n                                    placeholder=\"Admin User Email\"\r\n                                    value={user.user_email || ''}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <br></br>\r\n                                <label htmlFor=\"\">Admin User Name</label>\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"user_name\"\r\n                                    placeholder=\"Admin User Name\"\r\n                                    value={user.user_name || ''}\r\n                                    onChange={onChange}\r\n                                />\r\n\r\n                                <br></br>\r\n                                <label htmlFor=\"\">Admin User Phone</label>\r\n                                <input type=\"phone\"\r\n                                    className=\"form-control\"\r\n                                    name=\"user_phone_num\"\r\n                                    placeholder=\"Admin User Phone\"\r\n                                    value={user.user_phone_num || ''}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <br></br>\r\n                                <label htmlFor=\"\">Admin User Password</label>\r\n                                <input type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    name=\"user_password\"\r\n                                    placeholder=\"Admin User Password\"\r\n                                    value={user.user_password || ''}\r\n                                    onChange={onChange}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"m-auto btn btn-outline-light mt-5\" onClick={startConfig}>Start Config</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Login from '../../pages/auth/Login'\r\nimport Dashboard from '../../pages/dashboard/Dashboard'\r\nimport NotFound from '../../pages/404/NotFound'\r\nimport Coal from '../../pages/cost/Coal';\r\nimport Soil from './../../pages/cost/Soil';\r\nimport Tax from './../../pages/cost/Tax';\r\nimport OtherCost from './../../pages/cost/OtherCost';\r\nimport LandLordList from './../../pages/cost/LandLordList';\r\nimport LandLordCost from 'components/pages/cost/LandLordCost';\r\nimport StaffList from 'components/pages/cost/StaffList';\r\nimport StaffSalary from 'components/pages/cost/StaffSalary';\r\nimport LabourDailyCost from './../../pages/cost/LabourDailyCost';\r\nimport ShorderList from 'components/pages/brickbuilt/ShorderList';\r\nimport MilList from 'components/pages/brickbuilt/MilList';\r\nimport DbSetup from './../../pages/setupdb/DbSetup';\r\n\r\n\r\nclass Router extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Dashboard} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <Route exact path=\"/Coal\" component={Coal} />\r\n                    <Route exact path=\"/soil\" component={Soil} />\r\n                    <Route exact path=\"/tax\" component={Tax} />\r\n                    <Route exact path=\"/other-cost\" component={OtherCost} />\r\n                    <Route exact path=\"/land-lord-list\" component={LandLordList} />\r\n                    <Route exact path=\"/land-lord-cost\" component={LandLordCost} />\r\n                    <Route exact path=\"/staff-list\" component={StaffList} />\r\n                    <Route exact path=\"/staff-salary\" component={StaffSalary} />\r\n                    <Route exact path=\"/labour-cost\" component={LabourDailyCost} />\r\n                    <Route exact path=\"/shorder-list\" component={ShorderList} />\r\n                    <Route exact path=\"/mil-cost\" component={MilList} />\r\n                    <Route exact path=\"/db-setup\" component={DbSetup} />\r\n                    <Route default component={NotFound} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport Router from './components/layouts/router/Router';\nimport AppContext from './utils/context/AppContext';\n\naxios.defaults.baseURL = \"https://us-central1-brick-factory-027.cloudfunctions.net/api\"\n\n\nfunction App() {\n  return (\n    <AppContext>\n      <Router />\n    </AppContext>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}